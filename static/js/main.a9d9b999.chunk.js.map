{"version":3,"sources":["helpers/common.jsx","data/crops.js","components/Artisan-Timer.jsx","components/Harvest-Timer.jsx","components/Current-Timers.jsx","components/Custom-Timer.jsx","components/Journal.jsx","components/Log-Page.jsx","components/About-Page.jsx","components/Settings-Page.jsx","components/Counter.jsx","data/quotes.js","components/FooterComponent.jsx","components/Home.jsx","App.js","reportWebVitals.js","index.js"],"names":["readDate","day","removeSingleTimer","allTimers","toBeDeleted","filter","timer","id","CROPS","name","type","season","growTime","regrow","kegProduct","jarProduct","kegDuration","preferred","regrowTime","product","ArtisanTimer","crops","timers","setTimers","hasHoney","setHasHoney","hasFruitTrees","setHasFruitTrees","skipTreeWarning","setSkipTreeWarning","useState","selected","setSelected","open","setOpen","handleClose","handleFruitTrees","find","crop","countdown","firstHarvest","timerType","timerFor","productTimer","buttonStyling","selectedOption","parentButton","some","undefined","backgroundColor","color","Grid","container","spacing","justifyContent","alignItems","item","FormControl","sx","minWidth","InputLabel","Select","labelId","label","value","onChange","e","target","sort","a","b","localeCompare","map","MenuItem","Button","variant","style","disabled","includes","onClick","icon","faWineBottle","faUtensilSpoon","faTimes","pt","handleHoney","faFan","faLeaf","Dialog","onClose","DialogTitle","DialogContent","DialogContentText","component","FormGroup","row","FormControlLabel","control","Checkbox","size","checked","DialogActions","autoFocus","HarvestTimer","currentSeason","lowerCase","split","renderOptions","createHarvestTimer","faCarrot","CurrentTimers","error","activeTimers","setActiveTimers","completedTimers","setCompletedTimers","hasActiveTimers","setHasActiveTimers","hasCompletedTimers","setHasCompletedTimers","useEffect","updatedActiveTimers","repeat","repeatLength","splice","findIndex","sortedActiveTimers","updatedCompletedTimers","sortedCompletedTimers","length","timersToRender","fullError","renderProductName","productInTimer","createErrorList","triggers","ListItem","ListItemText","primary","handlePlurals","slice","renderCountdown","direction","exists","Alert","severity","AlertTitle","Typography","message","description","List","dense","Box","borderRadius","px","mb","width","maxWidth","position","overflow","maxHeight","padding","textAlign","py","pb","renderTimers","CustomTimer","timerName","setTimerName","timerLength","setTimerLength","timerRepeat","setTimerRepeat","setRepeatLength","validation","NaN","Number","Input","placeholder","Math","round","faCheck","Journal","journalText","setJournalText","TextField","fullWidth","multiline","rows","LogPage","currentDate","date","currentTimers","artisanTimers","harvestTimers","journal","customTimers","handleCheck","mobile","setError","display","paddingTop","xs","md","marginLeft","marginRight","paddingLeft","paddingRight","my","mx","AboutPage","faGithub","href","marginTop","SettingsPage","setDay","setShowState","setShowSettingsPage","setShowLogPage","resetOpen","setResetOpen","handleResetOpen","handleResetClose","textDecorationLine","fontStyle","IconButton","pr","faFire","Counter","spring1Reminder","setSpring1Reminder","handleSpring1Close","handleError","setTimeout","handleSeasonChange","remainingTimers","toRemove","clearedTimers","i","newSeasonFruitTrees","advanceDay","timersCountingDown","timersToRemove","timersToKeep","console","log","forEach","revertDay","timersCountingUp","checkRemainingTimers","revertedTimers","timersFrom","toDo","artisansToRemove","artisansToKeep","harvestsToRemove","harvestsToKeep","push","faArrowLeft","pl","faArrowRight","QUOTES","FooterComponent","quote","setQuote","quoteDuJour","renderQuote","quotes","amountOfQuotes","floor","random","Home","setMobile","showLogPage","showSettingsPage","showAboutPage","setShowAboutPage","showState","JSON","parse","window","localStorage","getItem","setItem","stringify","setResponsiveness","innerWidth","addEventListener","removeEventListener","menuOpen","setMenuOpen","Boolean","AppBar","Toolbar","event","currentTarget","edge","flexGrow","mr","faBars","Menu","anchorEl","MenuListProps","theme","createTheme","App","StyledEngineProvider","injectFirst","ThemeProvider","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a9d9b999.chunk.js","sourcesContent":["export const readDate = (day) => {\n    if (0 <= day && day <= 27) {\n        return `Spring ${day + 1}`;\n    }\n    if (28 <= day && day <= 55) {\n        return `Summer ${day - 27}`;\n    }\n    if (56 <= day && day <= 83) {\n        return `Fall ${day - 55}`;\n    }\n    return `Winter ${day - 83}`;\n};\n\nexport const removeSingleTimer = (allTimers, toBeDeleted) => {\n    const updatedTimers = allTimers.filter(\n        (timer) => timer.id !== toBeDeleted.id\n    );\n    return updatedTimers;\n};\n","export const CROPS = [\n    {\n        id: \"01-blue-jazz\",\n        name: \"Blue Jazz\",\n        type: \"flower\",\n        season: [\"spring\"],\n        growTime: 7,\n        regrow: false,\n    },\n    {\n        id: \"02-cauliflower\",\n        name: \"Cauliflower\",\n        type: \"vegetable\",\n        kegProduct: \"juice\",\n        jarProduct: \"pickles\",\n        season: [\"spring\"],\n        kegDuration: 6,\n        growTime: 12,\n        regrow: false,\n        preferred: \"jar\",\n    },\n    {\n        id: \"03-coffee-bean\",\n        name: \"Coffee Bean\",\n        type: \"other\",\n        kegProduct: \"Coffee\",\n        season: [\"spring\", \"summer\"],\n        kegDuration: 1,\n        growTime: 10,\n        regrow: true,\n        regrowTime: 2,\n    },\n    {\n        id: \"04-garlic\",\n        name: \"Garlic\",\n        type: \"vegetable\",\n        kegProduct: \"juice\",\n        jarProduct: \"pickles\",\n        season: [\"spring\"],\n        kegDuration: 4,\n        growTime: 4,\n        regrow: false,\n        preferred: \"jar\",\n    },\n    {\n        id: \"05-green-bean\",\n        name: \"Green Bean\",\n        type: \"vegetable\",\n        kegProduct: \"juice\",\n        jarProduct: \"pickles\",\n        season: [\"spring\"],\n        kegDuration: 4,\n        growTime: 10,\n        regrow: true,\n        regrowTime: 3,\n        preferred: \"jar\",\n    },\n    {\n        id: \"06-kale\",\n        name: \"Kale\",\n        type: \"vegetable\",\n        kegProduct: \"juice\",\n        jarProduct: \"pickles\",\n        season: [\"spring\"],\n        kegDuration: 4,\n        growTime: 6,\n        regrow: false,\n        preferred: \"jar\",\n    },\n    {\n        id: \"07-parsnip\",\n        name: \"Parsnip\",\n        type: \"vegetable\",\n        kegProduct: \"juice\",\n        jarProduct: \"pickles\",\n        season: [\"spring\"],\n        kegDuration: 4,\n        growTime: 4,\n        regrow: false,\n        preferred: \"jar\",\n    },\n    {\n        id: \"08-potato\",\n        name: \"Potato\",\n        type: \"vegetable\",\n        kegProduct: \"juice\",\n        jarProduct: \"pickles\",\n        season: [\"spring\"],\n        kegDuration: 4,\n        growTime: 6,\n        regrow: false,\n        preferred: \"jar\",\n    },\n    {\n        id: \"09-rhubarb\",\n        name: \"Rhubarb\",\n        type: \"fruit\",\n        kegProduct: \"wine\",\n        jarProduct: \"jelly\",\n        season: [\"spring\"],\n        kegDuration: 6,\n        growTime: 13,\n        regrow: false,\n        preferred: \"keg\",\n    },\n    {\n        id: \"10-strawberry\",\n        name: \"Strawberry\",\n        type: \"fruit\",\n        kegProduct: \"wine\",\n        jarProduct: \"jelly\",\n        season: [\"spring\"],\n        kegDuration: 6,\n        growTime: 8,\n        regrow: true,\n        regrowTime: 4,\n        preferred: \"keg\",\n    },\n    {\n        id: \"11-tulip\",\n        name: \"Tulip\",\n        type: \"flower\",\n        season: [\"spring\"],\n        growTime: 6,\n        regrow: false,\n    },\n    {\n        id: \"12-unmilled-rice\",\n        name: \"Unmilled Rice\",\n        type: \"vegetable\",\n        kegProduct: \"juice\",\n        jarProduct: \"pickles\",\n        season: [\"spring\"],\n        kegDuration: 4,\n        growTime: 8,\n        regrow: false,\n        preferred: \"jar\",\n    },\n    {\n        id: \"13-blueberry\",\n        name: \"Blueberry\",\n        type: \"fruit\",\n        kegProduct: \"wine\",\n        jarProduct: \"jelly\",\n        season: [\"summer\"],\n        kegDuration: 6,\n        growTime: 13,\n        regrow: true,\n        regrowTime: 4,\n        preferred: \"jar\",\n    },\n    {\n        id: \"14-corn\",\n        name: \"Corn\",\n        type: \"vegetable\",\n        kegProduct: \"juice\",\n        jarProduct: \"pickles\",\n        season: [\"summer\", \"fall\"],\n        kegDuration: 4,\n        growTime: 14,\n        regrow: true,\n        regrowTime: 4,\n        preferred: \"jar\",\n    },\n    {\n        id: \"15-hops\",\n        name: \"Hops\",\n        type: \"vegetable\",\n        kegProduct: \"Pale Ale\",\n        jarProduct: \"pickles\",\n        season: [\"summer\"],\n        kegDuration: 2,\n        growTime: 11,\n        regrow: true,\n        regrowTime: 1,\n        preferred: \"keg\",\n    },\n    {\n        id: \"16-hot-pepper\",\n        name: \"Hot Pepper\",\n        type: \"fruit\",\n        kegProduct: \"wine\",\n        jarProduct: \"jelly\",\n        season: [\"summer\"],\n        kegDuration: 6,\n        growTime: 5,\n        regrow: true,\n        regrowTime: 3,\n        preferred: \"jar\",\n    },\n    {\n        id: \"17-melon\",\n        name: \"Melon\",\n        type: \"fruit\",\n        kegProduct: \"wine\",\n        jarProduct: \"jelly\",\n        season: [\"summer\"],\n        kegDuration: 6,\n        growTime: 12,\n        regrow: false,\n        preferred: \"keg\",\n    },\n    {\n        id: \"18-poppy\",\n        name: \"Poppy\",\n        type: \"flower\",\n        season: [\"summer\"],\n        growTime: 7,\n        regrow: false,\n    },\n    {\n        id: \"19-radish\",\n        name: \"Radish\",\n        type: \"vegetable\",\n        kegProduct: \"juice\",\n        jarProduct: \"pickles\",\n        season: [\"summer\"],\n        kegDuration: 4,\n        growTime: 6,\n        regrow: false,\n        preferred: \"jar\",\n    },\n    {\n        id: \"20-red-cabbage\",\n        name: \"Red Cabbage\",\n        type: \"vegetable\",\n        kegProduct: \"juice\",\n        jarProduct: \"pickles\",\n        season: [\"summer\"],\n        kegDuration: 4,\n        growTime: 9,\n        regrow: false,\n        preferred: \"keg\",\n    },\n    {\n        id: \"21-starfruit\",\n        name: \"Starfruit\",\n        type: \"fruit\",\n        kegProduct: \"wine\",\n        jarProduct: \"jelly\",\n        season: [\"summer\"],\n        kegDuration: 6,\n        growTime: 13,\n        regrow: false,\n        preferred: \"keg\",\n    },\n    {\n        id: \"22-summer-spangle\",\n        name: \"Summer Spangle\",\n        type: \"flower\",\n        season: [\"summer\"],\n        growTime: 8,\n        regrow: false,\n    },\n    {\n        id: \"23-sunflower\",\n        name: \"Sunflower\",\n        type: \"flower\",\n        season: [\"summer\"],\n        growTime: 8,\n        regrow: false,\n    },\n    {\n        id: \"24-tomato\",\n        name: \"Tomato\",\n        type: \"vegetable\",\n        kegProduct: \"juice\",\n        jarProduct: \"pickles\",\n        season: [\"summer\"],\n        kegDuration: 4,\n        growTime: 11,\n        regrow: true,\n        regrowTime: 4,\n        preferred: \"jar\",\n    },\n    {\n        id: \"25-wheat\",\n        name: \"Wheat\",\n        type: \"other\",\n        kegProduct: \"Beer\",\n        jarProduct: \"pickles\",\n        season: [\"summer\", \"fall\"],\n        kegDuration: 1,\n        growTime: 4,\n        regrow: false,\n        preferred: \"keg\",\n    },\n    {\n        id: \"26-amaranth\",\n        name: \"Amaranth\",\n        type: \"vegetable\",\n        kegProduct: \"juice\",\n        jarProduct: \"pickles\",\n        season: [\"fall\"],\n        kegDuration: 4,\n        growTime: 7,\n        regrow: false,\n        preferred: \"jar\",\n    },\n    {\n        id: \"27-artichoke\",\n        name: \"Artichoke\",\n        type: \"vegetable\",\n        kegProduct: \"juice\",\n        jarProduct: \"pickles\",\n        season: [\"fall\"],\n        kegDuration: 4,\n        growTime: 8,\n        regrow: false,\n        preferred: \"jar\",\n    },\n    {\n        id: \"28-beet\",\n        name: \"Beet\",\n        type: \"vegetable\",\n        kegProduct: \"juice\",\n        jarProduct: \"pickles\",\n        season: [\"fall\"],\n        kegDuration: 4,\n        growTime: 6,\n        regrow: false,\n        preferred: \"jar\",\n    },\n    {\n        id: \"29-bok-choy\",\n        name: \"Bok Choy\",\n        type: \"vegetable\",\n        kegProduct: \"juice\",\n        jarProduct: \"pickles\",\n        season: [\"fall\"],\n        kegDuration: 4,\n        growTime: 4,\n        regrow: false,\n        preferred: \"jar\",\n    },\n    {\n        id: \"30-cranberry\",\n        name: \"Cranberry\",\n        type: \"fruit\",\n        kegProduct: \"wine\",\n        jarProduct: \"jelly\",\n        season: [\"fall\"],\n        kegDuration: 6,\n        growTime: 7,\n        regrow: true,\n        regrowTime: 5,\n        preferred: \"keg\",\n    },\n    {\n        id: \"31-eggplant\",\n        name: \"Eggplant\",\n        type: \"vegetable\",\n        kegProduct: \"juice\",\n        jarProduct: \"pickles\",\n        season: [\"fall\"],\n        kegDuration: 4,\n        growTime: 5,\n        regrow: true,\n        regrowTime: 5,\n        preferred: \"jar\",\n    },\n    {\n        id: \"32-fairy-rose\",\n        name: \"Fairy Rose\",\n        type: \"flower\",\n        season: [\"fall\"],\n        growTime: 12,\n        regrow: false,\n    },\n    {\n        id: \"33-grape\",\n        name: \"Grape\",\n        type: \"fruit\",\n        kegProduct: \"wine\",\n        jarProduct: \"jelly\",\n        season: [\"fall\"],\n        kegDuration: 6,\n        growTime: 10,\n        regrow: true,\n        regrowTime: 3,\n        preferred: \"keg\",\n    },\n    {\n        id: \"34-pumpkin\",\n        name: \"Pumpkin\",\n        type: \"vegetable\",\n        kegProduct: \"juice\",\n        jarProduct: \"pickles\",\n        season: [\"fall\"],\n        kegDuration: 4,\n        growTime: 13,\n        regrow: false,\n        preferred: \"keg\",\n    },\n    {\n        id: \"35-yam\",\n        name: \"Yam\",\n        type: \"vegetable\",\n        kegProduct: \"juice\",\n        jarProduct: \"pickles\",\n        season: [\"fall\"],\n        kegDuration: 4,\n        growTime: 10,\n        regrow: false,\n        preferred: \"jar\",\n    },\n    {\n        id: \"36-ancient-fruit\",\n        name: \"Ancient Fruit\",\n        type: \"fruit\",\n        kegProduct: \"wine\",\n        jarProduct: \"jelly\",\n        season: [\"spring\", \"summer\", \"fall\"],\n        kegDuration: 6,\n        growTime: 28,\n        regrow: true,\n        regrowTime: 7,\n        preferred: \"keg\",\n    },\n    {\n        id: \"37-cactus-fruit\",\n        name: \"Cactus Fruit\",\n        type: \"fruit\",\n        kegProduct: \"wine\",\n        jarProduct: \"jelly\",\n        season: [\"spring\", \"summer\", \"fall\", \"winter\"],\n        kegDuration: 6,\n        growTime: 12,\n        regrow: true,\n        regrowTime: 3,\n        preferred: \"keg\",\n    },\n    {\n        id: \"38-pineapple\",\n        name: \"Pineapple\",\n        type: \"fruit\",\n        kegProduct: \"wine\",\n        jarProduct: \"jelly\",\n        season: [\"summer\"],\n        kegDuration: 6,\n        growTime: 14,\n        regrow: true,\n        regrowTime: 7,\n        preferred: \"keg\",\n    },\n    {\n        id: \"39-taro-root\",\n        name: \"Taro Root\",\n        type: \"vegetable\",\n        kegProduct: \"juice\",\n        jarProduct: \"pickles\",\n        season: [\"summer\"],\n        kegDuration: 4,\n        growTime: 10,\n        regrow: false,\n        preferred: \"jar\",\n    },\n    {\n        id: \"40-sweet-gem-berry\",\n        name: \"Sweet Gem Berry\",\n        type: \"other\",\n        season: [\"fall\"],\n        growTime: 24,\n        regrow: false,\n    },\n    {\n        id: \"41-tea-leaves\",\n        name: \"Tea Leaf\",\n        type: \"other\",\n        kegProduct: \"Green Tea\",\n        jarProduct: \"pickles\",\n        season: [\"spring\", \"summer\", \"fall\"],\n        kegDuration: 1,\n        growTime: 20,\n        regrow: true,\n        regrowTime: 1,\n        preferred: \"jar\",\n    },\n    {\n        id: \"42-wild-horseradish\",\n        name: \"Wild Horseradish\",\n        type: \"forage\",\n        season: [\"spring\"],\n    },\n    {\n        id: \"43-daffodil\",\n        name: \"Daffodil\",\n        type: \"forage\",\n        season: [\"spring\"],\n    },\n    {\n        id: \"44-leek\",\n        name: \"Leek\",\n        type: \"forage\",\n        season: [\"spring\"],\n    },\n    {\n        id: \"45-dandelion\",\n        name: \"Dandelion\",\n        type: \"forage\",\n        season: [\"spring\"],\n    },\n    {\n        id: \"46-spring-onion\",\n        name: \"Spring Onion\",\n        type: \"forage\",\n        season: [\"spring\"],\n    },\n    {\n        id: \"47-morel\",\n        name: \"Morel\",\n        type: \"forage\",\n        season: [\"spring\"],\n    },\n    {\n        id: \"48-common-mushroom\",\n        name: \"Common Mushroom\",\n        type: \"forage\",\n        season: [\"spring\", \"summer\", \"fall\"],\n    },\n    {\n        id: \"49-salmonberry\",\n        name: \"Salmonberry\",\n        type: \"fruit\",\n        kegProduct: \"wine\",\n        jarProduct: \"jelly\",\n        season: [\"spring\"],\n        kegDuration: 6,\n        preferred: \"jar\",\n    },\n    {\n        id: \"50-spice-berry\",\n        name: \"Spice Berry\",\n        type: \"fruit\",\n        kegProduct: \"wine\",\n        jarProduct: \"jelly\",\n        season: [\"summer\"],\n        kegDuration: 6,\n        preferred: \"keg\",\n    },\n    {\n        id: \"51-sweet-pea\",\n        name: \"Sweet Pea\",\n        type: \"flower\",\n        season: [\"summer\"],\n    },\n    {\n        id: \"52-red-mushroom\",\n        name: \"Red Mushroom\",\n        type: \"forage\",\n        season: [\"summer\"],\n    },\n    {\n        id: \"53-fiddlehead-fern\",\n        name: \"Fiddlehead Fern\",\n        type: \"vegetable\",\n        kegProduct: \"juice\",\n        jarProduct: \"pickles\",\n        season: [\"summer\"],\n        kegDuration: 4,\n        preferred: \"jar\",\n    },\n    {\n        id: \"54-wild-plum\",\n        name: \"Wild Plum\",\n        type: \"fruit\",\n        kegProduct: \"wine\",\n        jarProduct: \"jelly\",\n        season: [\"fall\"],\n        kegDuration: 6,\n        preferred: \"keg\",\n    },\n    {\n        id: \"55-hazelnut\",\n        name: \"Hazelnut\",\n        type: \"forage\",\n        season: [\"fall\"],\n        regrow: false,\n    },\n    {\n        id: \"56-blackberry\",\n        name: \"Blackberry\",\n        type: \"fruit\",\n        kegProduct: \"wine\",\n        jarProduct: \"jelly\",\n        season: [\"fall\"],\n        kegDuration: 6,\n        preferred: \"jar\",\n    },\n    {\n        id: \"57-chanterelle\",\n        name: \"Chanterelle\",\n        type: \"forage\",\n        season: [\"fall\"],\n    },\n    {\n        id: \"58-purple-mushroom\",\n        name: \"Purple Mushroom\",\n        type: \"forage\",\n        season: [\"fall\"],\n    },\n    {\n        id: \"59-winter-root\",\n        name: \"Winter Root\",\n        type: \"forage\",\n        season: [\"winter\"],\n    },\n    {\n        id: \"60-crystal-fruit\",\n        name: \"Crystal Fruit\",\n        type: \"fruit\",\n        kegProduct: \"wine\",\n        jarProduct: \"jelly\",\n        season: [\"winter\"],\n        kegDuration: 6,\n        preferred: \"keg\",\n    },\n    {\n        id: \"61-snow-yam\",\n        name: \"Snow Yam\",\n        type: \"forage\",\n        season: [\"winter\"],\n    },\n    {\n        id: \"62-crocus\",\n        name: \"Crocus\",\n        type: \"flower\",\n        season: [\"winter\"],\n    },\n    {\n        id: \"63-holly\",\n        name: \"Holly\",\n        type: \"forage\",\n        season: [\"winter\"],\n    },\n    {\n        id: \"64-cave-carrot\",\n        name: \"Cave Carrot\",\n        type: \"forage\",\n        season: [\"spring\", \"summer\", \"fall\", \"winter\"],\n    },\n    {\n        id: \"65-coconut\",\n        name: \"Coconut\",\n        type: \"fruit\",\n        kegProduct: \"wine\",\n        jarProduct: \"jelly\",\n        season: [\"spring\", \"summer\", \"fall\", \"winter\"],\n        kegDuration: 6,\n        preferred: \"keg\",\n    },\n    {\n        id: \"66-ginger\",\n        name: \"Ginger\",\n        type: \"other\",\n        jarProduct: \"pickles\",\n        season: [\"spring\", \"summer\", \"fall\", \"winter\"],\n    },\n    {\n        id: \"67-magma-cap\",\n        name: \"Magma Cap\",\n        type: \"forage\",\n        season: [\"spring\", \"summer\", \"fall\", \"winter\"],\n    },\n    {\n        id: \"68-roe\",\n        name: \"Roe\",\n        type: \"other\",\n        jarProduct: \"Aged Roe\",\n        season: [\"spring\", \"summer\", \"fall\", \"winter\"],\n    },\n    {\n        id: \"69-honey\",\n        name: \"Honey\",\n        type: \"other\",\n        growTime: 4,\n        regrow: true,\n        regrowTime: 4,\n        kegProduct: \"Mead\",\n        season: [\"spring\", \"summer\", \"fall\"],\n        kegDuration: 1,\n    },\n    {\n        id: \"70-sturgeon-roe\",\n        name: \"Sturgeon Roe\",\n        type: \"other\",\n        jarProduct: \"Caviar\",\n        season: [\"spring\", \"summer\", \"fall\", \"winter\"],\n    },\n    {\n        id: \"71-wild-seeds\",\n        name: \"Wild Seeds\",\n        type: \"other\",\n        growTime: 7,\n        regrow: false,\n        season: [],\n    },\n    {\n        id: \"72-apricot\",\n        name: \"Apricot\",\n        type: \"fruit\",\n        kegProduct: \"wine\",\n        jarProduct: \"jelly\",\n        season: [\"spring\"],\n        kegDuration: 6,\n        preferred: \"jar\",\n    },\n    {\n        id: \"73-cherry\",\n        name: \"Cherry\",\n        type: \"fruit\",\n        kegProduct: \"wine\",\n        jarProduct: \"jelly\",\n        season: [\"spring\"],\n        kegDuration: 6,\n        preferred: \"keg\",\n    },\n    {\n        id: \"74-banana\",\n        name: \"Banana\",\n        type: \"fruit\",\n        kegProduct: \"wine\",\n        jarProduct: \"jelly\",\n        season: [\"summer\"],\n        kegDuration: 6,\n        preferred: \"keg\",\n    },\n    {\n        id: \"75-mango\",\n        name: \"Mango\",\n        type: \"fruit\",\n        kegProduct: \"wine\",\n        jarProduct: \"jelly\",\n        season: [\"summer\"],\n        kegDuration: 6,\n        preferred: \"keg\",\n    },\n    {\n        id: \"76-orange\",\n        name: \"Orange\",\n        type: \"fruit\",\n        kegProduct: \"wine\",\n        jarProduct: \"jelly\",\n        season: [\"summer\"],\n        kegDuration: 6,\n        preferred: \"keg\",\n    },\n    {\n        id: \"77-peach\",\n        name: \"Peach\",\n        type: \"fruit\",\n        kegProduct: \"wine\",\n        jarProduct: \"jelly\",\n        season: [\"summer\"],\n        kegDuration: 6,\n        preferred: \"keg\",\n    },\n    {\n        id: \"78-apple\",\n        name: \"Apple\",\n        type: \"fruit\",\n        kegProduct: \"wine\",\n        jarProduct: \"jelly\",\n        season: [\"fall\"],\n        kegDuration: 6,\n        preferred: \"keg\",\n    },\n    {\n        id: \"79-pomegranate\",\n        name: \"Pomegranate\",\n        type: \"fruit\",\n        kegProduct: \"wine\",\n        jarProduct: \"jelly\",\n        season: [\"fall\"],\n        kegDuration: 6,\n        preferred: \"keg\",\n    },\n    {\n        id: \"80-qi-fruit\",\n        name: \"Qi Fruit\",\n        type: \"fruit\",\n        kegProduct: \"wine\",\n        jarProduct: \"jelly\",\n        season: [\"spring\", \"summer\", \"fall\", \"winter\"],\n        kegDuration: 6,\n        growTime: 4,\n        regrow: false,\n        preferred: \"jar\",\n    },\n    {\n        id: \"81-fruit-trees\",\n        name: \"Fruit Trees\",\n        type: \"other\",\n        growTime: 3,\n        regrow: true,\n        regrowTime: 3,\n        season: [\"spring\", \"summer\", \"fall\"],\n    },\n    {\n        id: \"82-spring-seeds\",\n        name: \"Spring Seeds\",\n        type: \"other\",\n        growTime: 7,\n        regrow: false,\n        product: \"Wild crops (Spring)\",\n        season: [\"spring\"],\n    },\n    {\n        id: \"83-summer-seeds\",\n        name: \"Summer Seeds\",\n        type: \"other\",\n        growTime: 7,\n        regrow: false,\n        product: \"Wild crops (Summer)\",\n        season: [\"summer\"],\n    },\n    {\n        id: \"84-fall-seeds\",\n        name: \"Fall Seeds\",\n        type: \"other\",\n        growTime: 7,\n        regrow: false,\n        product: \"Wild crops (Fall)\",\n        season: [\"fall\"],\n    },\n    {\n        id: \"85-winter-seeds\",\n        name: \"Winter Seeds\",\n        type: \"other\",\n        growTime: 7,\n        regrow: false,\n        product: \"Wild crops (Winter)\",\n        season: [\"winter\"],\n    },\n];\n","import React, { useState } from \"react\";\nimport {\n    Grid,\n    Button,\n    Checkbox,\n    Select,\n    FormGroup,\n    FormControl,\n    FormControlLabel,\n    InputLabel,\n    MenuItem,\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogContentText,\n    DialogActions,\n} from \"@mui/material\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n    faWineBottle,\n    faFan,\n    faUtensilSpoon,\n    faTimes,\n    faLeaf,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { removeSingleTimer } from \"../helpers/common\";\nimport { CROPS } from \"../data/crops\";\n\nconst ArtisanTimer = ({\n    timers,\n    setTimers,\n    day,\n    hasHoney,\n    setHasHoney,\n    hasFruitTrees,\n    setHasFruitTrees,\n    skipTreeWarning,\n    setSkipTreeWarning,\n}) => {\n    const [selected, setSelected] = useState(\"\");\n    const [open, setOpen] = useState(false);\n\n    const handleChange = (e) => {\n        if (e.target.value !== \"\") {\n            const selectedOption = CROPS.find(\n                (crop) => crop.id === e.target.value\n            );\n            setSelected(selectedOption);\n        }\n    };\n\n    const handleClickOpen = () => {\n        if (!hasFruitTrees && !skipTreeWarning) {\n            setOpen(true);\n            return;\n        }\n        handleFruitTrees();\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const handleCheck = (e) => {\n        setSkipTreeWarning(e.target.checked);\n    };\n\n    const handleFruitTrees = () => {\n        if (open) {\n            handleClose();\n        }\n        if (!hasFruitTrees) {\n            const product = CROPS.find((crop) => crop.name === \"Fruit Trees\");\n            setHasFruitTrees(true);\n            setTimers([\n                ...timers,\n                {\n                    ...product,\n                    countdown: 2,\n                    firstHarvest: true,\n                    timerType: \"harvest\",\n                    timerFor: \"Fruit Trees\",\n                },\n            ]);\n            return;\n        }\n        setHasFruitTrees(false);\n        const productTimer = timers.find(\n            (timer) => timer.name === \"Fruit Trees\"\n        );\n        setTimers(removeSingleTimer(timers, productTimer));\n        return productTimer;\n    };\n\n    const handleHoney = () => {\n        if (!hasHoney) {\n            const product = CROPS.find((crop) => crop.name === \"Honey\");\n            setHasHoney(true);\n            setTimers([\n                ...timers,\n                {\n                    ...product,\n                    countdown: product.growTime,\n                    timerFor: \"Honey\",\n                    timerType: \"harvest\",\n                    firstHarvest: true,\n                },\n            ]);\n            return;\n        }\n        setHasHoney(false);\n        const productTimer = timers.find((timer) => timer.name === \"Honey\");\n        setTimers(removeSingleTimer(timers, productTimer));\n        return productTimer;\n    };\n\n    const createKegTimer = (selectedOption) => {\n        setTimers([\n            ...timers,\n            {\n                ...selectedOption,\n                id: `${selectedOption.name}-${selectedOption.kegProduct}`,\n                countdown: selectedOption.kegDuration,\n                timerFor: selectedOption.kegProduct,\n                timerType: \"keg\",\n            },\n        ]);\n        setSelected(\"\");\n    };\n\n    const createJarTimer = (selectedOption) => {\n        setTimers([\n            ...timers,\n            {\n                ...selectedOption,\n                id: `${selectedOption.name}-${selectedOption.jarProduct}`,\n                countdown: selectedOption.name === \"Caviar\" ? 3 : 4,\n                timerFor: selectedOption.jarProduct,\n                timerType: \"jar\",\n            },\n        ]);\n        setSelected(\"\");\n    };\n\n    const clearTimer = (selectedOption) => {\n        if (selectedOption !== \"\") {\n            setSelected(\"\");\n        }\n    };\n\n    const buttonStyling = (selectedOption, parentButton) => {\n        if (timers.some((timer) => timer.name === selected.name)) return {};\n        if (selectedOption !== \"\" && selectedOption.preferred !== undefined) {\n            if (parentButton === \"keg\" && selectedOption.preferred === \"keg\") {\n                return { backgroundColor: \"green\", color: \"white\" };\n            }\n            if (parentButton === \"jar\" && selectedOption.preferred === \"jar\") {\n                return { backgroundColor: \"green\", color: \"white\" };\n            }\n            return { backgroundColor: \"red\", color: \"white\" };\n        }\n        return {};\n    };\n\n    const renderOptions = (crops) => {\n        const cropsToSort = crops.filter(\n            (crop) =>\n                crop.kegProduct !== undefined || crop.jarProduct !== undefined\n        );\n\n        // ES6 alphabetical order\n        const cropsEligibleForArtisanProducts = cropsToSort.sort((a, b) =>\n            a.name.localeCompare(b.name)\n        );\n\n        return cropsEligibleForArtisanProducts.map((crop) => (\n            <MenuItem key={`${crop.id}-artisan-option`} value={crop.id}>\n                {crop.name}\n            </MenuItem>\n        ));\n    };\n\n    return (\n        <>\n            <Grid\n                container\n                spacing={1}\n                justifyContent=\"center\"\n                alignItems=\"center\"\n            >\n                <Grid item>\n                    <FormControl sx={{ minWidth: 95 }}>\n                        <InputLabel id=\"starter-select-label\">\n                            Starter\n                        </InputLabel>\n                        <Select\n                            labelId=\"starter-select-label\"\n                            id=\"starter-select\"\n                            label=\"Starter\"\n                            value={selected !== \"\" ? selected.id : \"\"}\n                            onChange={handleChange}\n                        >\n                            {renderOptions(CROPS)}\n                        </Select>\n                    </FormControl>\n                </Grid>\n                <Grid item>\n                    <Button\n                        variant=\"contained\"\n                        style={buttonStyling(selected, \"keg\")}\n                        disabled={\n                            selected === \"\" ||\n                            [\"Ginger\", \"Roe\", \"Sturgeon Roe\"].includes(\n                                selected.name\n                            ) ||\n                            timers.some(\n                                (timer) =>\n                                    selected.name === timer.name &&\n                                    timer.timerType === \"keg\"\n                            )\n                        }\n                        onClick={() => createKegTimer(selected)}\n                    >\n                        <FontAwesomeIcon icon={faWineBottle} />\n                        &nbsp;Keg it\n                    </Button>\n                </Grid>\n                <Grid item>\n                    <Button\n                        variant=\"contained\"\n                        style={buttonStyling(selected, \"jar\")}\n                        disabled={\n                            selected === \"\" ||\n                            [\"Coffee Bean\", \"Honey\"].includes(selected.name) ||\n                            timers.some(\n                                (timer) =>\n                                    selected.name === timer.name &&\n                                    timer.timerType === \"jar\"\n                            )\n                        }\n                        onClick={() => createJarTimer(selected)}\n                    >\n                        <FontAwesomeIcon icon={faUtensilSpoon} />\n                        &nbsp;Jar it\n                    </Button>\n                </Grid>\n                <Grid item>\n                    <Button\n                        variant=\"contained\"\n                        color=\"warning\"\n                        disabled={selected === \"\"}\n                        onClick={() => clearTimer(selected)}\n                    >\n                        <FontAwesomeIcon icon={faTimes} />\n                        &nbsp;Clear it\n                    </Button>\n                </Grid>\n            </Grid>\n            <Grid\n                container\n                spacing={1}\n                justifyContent=\"center\"\n                alignItems=\"center\"\n                sx={{ pt: 1 }}\n            >\n                <Grid item>\n                    <Button\n                        color={hasHoney ? \"warning\" : \"primary\"}\n                        variant=\"contained\"\n                        disabled={day > 83}\n                        onClick={() => handleHoney()}\n                    >\n                        <FontAwesomeIcon icon={hasHoney ? faTimes : faFan} />{\" \"}\n                        &nbsp;\n                        {hasHoney\n                            ? \"Remove bee house timer\"\n                            : \"Add bee house timer\"}\n                    </Button>\n                </Grid>\n                <Grid item>\n                    <Button\n                        color={hasFruitTrees ? \"warning\" : \"primary\"}\n                        variant=\"contained\"\n                        disabled={day > 83}\n                        onClick={() => handleClickOpen()}\n                    >\n                        <FontAwesomeIcon\n                            icon={hasFruitTrees ? faTimes : faLeaf}\n                        />{\" \"}\n                        &nbsp;\n                        {hasFruitTrees\n                            ? \"Remove fruit tree timer\"\n                            : \"Add fruit tree timer\"}\n                    </Button>\n                    <Dialog\n                        open={open}\n                        onClose={handleClose}\n                        aria-labelledby=\"tree-timer-dialog\"\n                    >\n                        <DialogTitle id=\"tree-timer-dialog\">\n                            Heads up!\n                        </DialogTitle>\n                        <DialogContent>\n                            <DialogContentText>\n                                This timer assumes that you already have fully\n                                matured fruit trees and just need to keep track\n                                of their fruit growth. If you need to track a\n                                fruit tree sapling, please build a custom timer\n                                that lasts 28 days. Do you wish to proceed?\n                            </DialogContentText>\n                            <FormControl component=\"fieldset\">\n                                <FormGroup\n                                    aria-label=\"Don't show this reminder again\"\n                                    row\n                                >\n                                    <FormControlLabel\n                                        control={\n                                            <Checkbox\n                                                size=\"small\"\n                                                checked={skipTreeWarning}\n                                                onChange={handleCheck}\n                                                name=\"skipTreeWarning\"\n                                            />\n                                        }\n                                        label=\"Don't show this reminder again\"\n                                    />\n                                </FormGroup>\n                            </FormControl>\n                        </DialogContent>\n                        <DialogActions>\n                            <Button\n                                autoFocus\n                                onClick={() => handleClose()}\n                                color=\"primary\"\n                            >\n                                No\n                            </Button>\n                            <Button\n                                onClick={() => handleFruitTrees()}\n                                color=\"primary\"\n                            >\n                                Yes\n                            </Button>\n                        </DialogActions>\n                    </Dialog>\n                </Grid>\n            </Grid>\n        </>\n    );\n};\n\nexport default ArtisanTimer;\n","import React, { useState } from \"react\";\nimport {\n    Grid,\n    Button,\n    Select,\n    FormControl,\n    InputLabel,\n    MenuItem,\n} from \"@mui/material\";\nimport { lowerCase } from \"lodash\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCarrot, faTimes } from \"@fortawesome/free-solid-svg-icons\";\nimport { CROPS } from \"../data/crops\";\nimport { readDate } from \"../helpers/common\";\n\nconst HarvestTimer = ({ day, timers, setTimers }) => {\n    const [selected, setSelected] = useState(\"\");\n\n    const renderOptions = (crops) => {\n        const currentSeason = lowerCase(readDate(day).split(\" \")[0]);\n        const cropsInSeason = crops.filter((crop) =>\n            crop.season.includes(currentSeason)\n        );\n        const cropsToSort = cropsInSeason.filter(\n            (crop) =>\n                crop.growTime !== undefined &&\n                !(\n                    crop.name.includes(\"Honey\") ||\n                    crop.name.includes(\"Fruit Trees\")\n                ) &&\n                !timers.some((timer) => timer.name === crop.name)\n        );\n\n        // ES6 alphabetical order\n        const cropsEligibleForHarvestTimer = cropsToSort.sort((a, b) =>\n            a.name.localeCompare(b.name)\n        );\n\n        return cropsEligibleForHarvestTimer.map((crop) => (\n            <MenuItem key={`${crop.id}-harvest-option`} value={crop.id}>\n                {crop.name}\n            </MenuItem>\n        ));\n    };\n\n    const handleChange = (e) => {\n        if (e.target.value !== \"\") {\n            const selectedOption = CROPS.find(\n                (crop) => crop.id === e.target.value\n            );\n            setSelected(selectedOption);\n        }\n    };\n\n    const clearTimer = (selectedOption) => {\n        if (selectedOption !== \"\") {\n            setSelected(\"\");\n        }\n    };\n\n    const createHarvestTimer = (selectedOption) => {\n        if (selectedOption.regrow) {\n            setTimers([\n                ...timers,\n                {\n                    ...selectedOption,\n                    countdown: selectedOption.growTime,\n                    timerType: \"harvest\",\n                    firstHarvest: true,\n                },\n            ]);\n            setSelected(\"\");\n            return;\n        }\n        setTimers([\n            ...timers,\n            {\n                ...selectedOption,\n                countdown: selectedOption.growTime,\n                timerType: \"harvest\",\n            },\n        ]);\n        setSelected(\"\");\n        return;\n    };\n\n    return (\n        <Grid container spacing={1} justifyContent=\"center\" alignItems=\"center\">\n            <Grid item>\n                <FormControl sx={{ minWidth: 80 }}>\n                    <InputLabel id=\"crop-select-label\">Crop</InputLabel>\n                    <Select\n                        labelId=\"crop-select-label\"\n                        id=\"crop-select\"\n                        label=\"Crop\"\n                        value={selected !== \"\" ? selected.id : \"\"}\n                        onChange={handleChange}\n                    >\n                        {renderOptions(CROPS)}\n                    </Select>\n                </FormControl>\n            </Grid>\n            <Grid item>\n                <Button\n                    variant=\"contained\"\n                    style={\n                        selected !== \"\"\n                            ? { backgroundColor: \"green\", color: \"white\" }\n                            : {}\n                    }\n                    disabled={selected === \"\"}\n                    onClick={() => createHarvestTimer(selected)}\n                >\n                    <FontAwesomeIcon icon={faCarrot} />\n                    &nbsp;Plant it\n                </Button>\n            </Grid>\n            <Grid item>\n                <Button\n                    variant=\"contained\"\n                    color=\"warning\"\n                    disabled={selected === \"\"}\n                    onClick={() => clearTimer(selected)}\n                >\n                    <FontAwesomeIcon icon={faTimes} />\n                    &nbsp;Clear it\n                </Button>\n            </Grid>\n        </Grid>\n    );\n};\n\nexport default HarvestTimer;\n","import React, { useState, useEffect } from \"react\";\nimport {\n    Box,\n    IconButton,\n    Grid,\n    List,\n    ListItem,\n    ListItemText,\n    Typography,\n} from \"@mui/material\";\nimport { Alert, AlertTitle } from \"@mui/material\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons\";\nimport { removeSingleTimer } from \"../helpers/common\";\n\nconst CurrentTimers = ({\n    day,\n    error,\n    timers,\n    setTimers,\n    hasHoney,\n    hasFruitTrees,\n}) => {\n    const [activeTimers, setActiveTimers] = useState([]);\n    const [completedTimers, setCompletedTimers] = useState([]);\n    const [hasActiveTimers, setHasActiveTimers] = useState(false);\n    const [hasCompletedTimers, setHasCompletedTimers] = useState(false);\n\n    useEffect(() => {\n        const updatedActiveTimers = timers.filter(\n            (timer) =>\n                timer.countdown !== 0 &&\n                !(\n                    timer.regrow &&\n                    timer.countdown === timer.regrowTime &&\n                    timer.firstHarvest === false\n                ) &&\n                !(\n                    timer.repeat &&\n                    timer.firstHarvest === false &&\n                    timer.countdown === timer.repeatLength\n                )\n        );\n        if (\n            !hasHoney &&\n            updatedActiveTimers.some((timer) => timer.name === \"Honey\")\n        ) {\n            updatedActiveTimers.splice(\n                updatedActiveTimers.findIndex(\n                    (timer) => timer.name === \"Honey\"\n                ),\n                1\n            );\n        }\n        const sortedActiveTimers = updatedActiveTimers.sort((a, b) =>\n            a.countdown > b.countdown ? 1 : -1\n        );\n        setActiveTimers(sortedActiveTimers);\n        const updatedCompletedTimers = timers.filter(\n            (timer) =>\n                timer.countdown === 0 ||\n                (timer.regrow &&\n                    timer.firstHarvest === false &&\n                    timer.countdown === timer.regrowTime) ||\n                (timer.repeat &&\n                    timer.firstHarvest === false &&\n                    timer.countdown === timer.repeatLength)\n        );\n        const sortedCompletedTimers = updatedCompletedTimers.sort((a, b) =>\n            a.countdown > b.countdown ? 1 : -1\n        );\n        setCompletedTimers(sortedCompletedTimers);\n        if (updatedActiveTimers.length > 0) {\n            setHasActiveTimers(true);\n        } else setHasActiveTimers(false);\n        if (updatedCompletedTimers.length > 0) {\n            setHasCompletedTimers(true);\n        } else setHasCompletedTimers(false);\n    }, [timers]);\n\n    const renderProductName = (productInTimer) => {\n        if (productInTimer.timerType === \"harvest\") {\n            if (productInTimer.name.includes(\"Seeds\")) {\n                return productInTimer.product;\n            }\n            return productInTimer.name;\n        }\n        if (\n            (productInTimer.timerType === \"keg\" &&\n                ![\"wine\", \"juice\"].includes(productInTimer.timerFor)) ||\n            [\"Honey\", \"Fruit Trees\"].includes(productInTimer.timerFor)\n        ) {\n            return productInTimer.timerFor;\n        }\n        if (\n            productInTimer.timerType === \"jar\" &&\n            ![\"jelly\", \"pickles\"].includes(productInTimer.timerFor)\n        ) {\n            if (productInTimer.timerFor === \"Aged Roe\") {\n                return productInTimer.timerFor;\n            }\n            return \"Caviar\";\n        }\n        if (productInTimer.timerType === \"custom\") {\n            return productInTimer.name;\n        }\n        return `${productInTimer.name} ${productInTimer.timerFor}`;\n    };\n\n    const createErrorList = (fullError) =>\n        fullError.triggers.map((error) => {\n            return (\n                <ListItem key={`error-for-${error.id}`}>\n                    {error.name === \"Fruit Trees\" ? (\n                        <ListItemText primary=\"Fruit from fruit trees\" />\n                    ) : (\n                        <ListItemText primary={renderProductName(error)} />\n                    )}\n                </ListItem>\n            );\n        });\n\n    const renderTimerErrorBlock = (fullError) => (\n        <List dense>{createErrorList(fullError)}</List>\n    );\n\n    const handlePlurals = (name) => {\n        if (name.slice(-1) === \"s\") {\n            return ` are`;\n        }\n        return ` is`;\n    };\n\n    const renderCountdown = (productInTimer) => {\n        if (productInTimer.name === \"Fruit Trees\") {\n            if ([3, 0].includes(productInTimer.countdown)) {\n                return ` are full (3 fruit each). Pick them today!`;\n            }\n            if (productInTimer.countdown === 2) {\n                return `: 1 fruit each`;\n            }\n            return `: 2 fruit each`;\n        }\n        if (\n            productInTimer.regrow &&\n            productInTimer.firstHarvest === false &&\n            productInTimer.countdown === productInTimer.regrowTime\n        ) {\n            return `${handlePlurals(\n                productInTimer.name\n            )} ready today. Next harvest in ${productInTimer.countdown} days`;\n        }\n        if (productInTimer.timerType === \"custom\") {\n            if (\n                productInTimer.repeat &&\n                productInTimer.countdown === productInTimer.repeatLength\n            ) {\n                return `: timer completed. Next up in ${productInTimer.countdown} days`;\n            }\n            return `${\n                productInTimer.countdown > 0\n                    ? `: ${productInTimer.countdown} ${\n                          productInTimer.countdown > 1 ? \"days\" : \"day\"\n                      } left`\n                    : \": timer completed\"\n            }`;\n        }\n        return `${\n            productInTimer.countdown > 0\n                ? `: ${productInTimer.countdown} ${\n                      productInTimer.countdown > 1 ? \"days\" : \"day\"\n                  } left`\n                : `${handlePlurals(\n                      productInTimer.timerFor !== undefined\n                          ? productInTimer.timerFor\n                          : productInTimer.name\n                  )} ready today`\n        }`;\n    };\n\n    const renderCompletedTimers = (allTimers, timersToRender) =>\n        timersToRender.map((timer) => {\n            return (\n                <ListItem\n                    key={`${timer.id}-${timer.timerFor}-day-${day}-completed`}\n                    style={{ textAlign: \"center\" }}\n                    sx={{ py: 0 }}\n                >\n                    <ListItemText>\n                        <Typography>\n                            <strong>\n                                {renderProductName(timer)}\n                                {renderCountdown(timer)} &nbsp;\n                            </strong>\n                            <IconButton\n                                color=\"error\"\n                                size=\"small\"\n                                onClick={() => {\n                                    setTimers(\n                                        removeSingleTimer(\n                                            allTimers,\n                                            timer,\n                                            \"product\"\n                                        )\n                                    );\n                                    if (completedTimers.length === 0) {\n                                        setHasCompletedTimers(false);\n                                        return;\n                                    }\n                                    setHasCompletedTimers(true);\n                                }}\n                            >\n                                <FontAwesomeIcon icon={faTimes} />\n                            </IconButton>\n                        </Typography>\n                    </ListItemText>\n                </ListItem>\n            );\n        });\n\n    const renderTimers = (allTimers, timersToRender) =>\n        timersToRender.map((timer) => {\n            return (\n                <ListItem\n                    size=\"small\"\n                    key={`${timer.id}-${timer.timerFor}-day-${day}`}\n                    style={{ textAlign: \"center\" }}\n                    sx={{ py: 0 }}\n                >\n                    <ListItemText>\n                        <Typography>\n                            {renderProductName(timer)}\n                            {renderCountdown(timer)} &nbsp;\n                            <IconButton\n                                color=\"error\"\n                                size=\"small\"\n                                sx={{ pb: 1 }}\n                                onClick={() => {\n                                    setTimers(\n                                        removeSingleTimer(\n                                            allTimers,\n                                            timer,\n                                            \"product\"\n                                        )\n                                    );\n                                    if (activeTimers.length === 0) {\n                                        setHasActiveTimers(false);\n                                        return;\n                                    }\n                                    setHasActiveTimers(true);\n                                }}\n                            >\n                                <FontAwesomeIcon icon={faTimes} />\n                            </IconButton>\n                        </Typography>\n                    </ListItemText>\n                </ListItem>\n            );\n        });\n\n    return (\n        <Grid\n            container\n            direction=\"column\"\n            justifyContent=\"center\"\n            alignItems=\"center\"\n        >\n            <Grid item>\n                {error.exists && (\n                    <Alert severity=\"error\">\n                        <AlertTitle>\n                            <Typography variant=\"body1\">\n                                {error.message}\n                            </Typography>\n                        </AlertTitle>\n                        <em>{error.description}</em>\n                        <Typography variant=\"body2\">\n                            {renderTimerErrorBlock(error)}\n                        </Typography>\n                    </Alert>\n                )}\n            </Grid>\n            <Grid item>\n                <Box sx={{ borderRadius: 1 }}>\n                    <Typography variant=\"body1\">\n                        {hasCompletedTimers && (\n                            <List\n                                dense\n                                sx={{\n                                    borderRadius: 2,\n                                    px: \"auto\",\n                                    mb: 1,\n                                    width: \"100%\",\n                                    maxWidth: 450,\n                                    position: \"relative\",\n                                    overflow: \"scroll\",\n                                    maxHeight: 82,\n                                    \"& ul\": { padding: 0 },\n                                }}\n                                style={{ backgroundColor: \"#EFF7EE\" }}\n                            >\n                                {renderCompletedTimers(timers, completedTimers)}\n                            </List>\n                        )}\n                        {hasActiveTimers && (\n                            <List\n                                dense\n                                sx={{\n                                    borderRadius: 2,\n                                    px: \"auto\",\n                                    width: \"100%\",\n                                    maxWidth: 450,\n                                    position: \"relative\",\n                                    overflow: \"scroll\",\n                                    maxHeight: 88,\n                                    \"& ul\": { padding: 0 },\n                                }}\n                                style={{ backgroundColor: \"#DCDCDC\" }}\n                            >\n                                {renderTimers(timers, activeTimers)}\n                            </List>\n                        )}\n                    </Typography>\n                </Box>\n            </Grid>\n            {timers.length === 0 && !hasHoney && !hasFruitTrees ? (\n                <Grid item sx={{ padding: 2 }}>\n                    <Typography variant=\"body2\">None. Enjoy yer day</Typography>\n                </Grid>\n            ) : null}\n        </Grid>\n    );\n};\n\nexport default CurrentTimers;\n","import React, { useState } from \"react\";\nimport {\n    Grid,\n    Button,\n    Input,\n    FormControl,\n    FormGroup,\n    FormControlLabel,\n    Checkbox,\n} from \"@mui/material\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCheck, faTimes } from \"@fortawesome/free-solid-svg-icons\";\n\nconst CustomTimer = ({ timers, setTimers }) => {\n    const [timerName, setTimerName] = useState(\"\");\n    const [timerLength, setTimerLength] = useState(\"\");\n    const [timerRepeat, setTimerRepeat] = useState(false);\n    const [repeatLength, setRepeatLength] = useState(null);\n\n    const handleNameChange = (e) => {\n        setTimerName(e.target.value);\n    };\n\n    const handleTimeChange = (e) => {\n        setTimerLength(e.target.value);\n    };\n\n    const handleRepeatLengthChange = (e) => {\n        setRepeatLength(e.target.value);\n    };\n\n    const handleCheck = (e) => {\n        setTimerRepeat(e.target.checked);\n    };\n\n    const clearTimer = () => {\n        setTimerLength(\"\");\n        setTimerName(\"\");\n        setTimerRepeat(false);\n        setRepeatLength(null);\n    };\n\n    const createCustomTimer = () => {\n        setTimers([\n            ...timers,\n            {\n                id: `${timerName}-custom-timer`,\n                name: timerName,\n                countdown: Math.round(Number(timerLength)),\n                timerType: \"custom\",\n                repeat: timerRepeat,\n                firstHarvest: true,\n                repeatLength,\n            },\n        ]);\n        setTimerName(\"\");\n        setTimerLength(\"\");\n        setTimerRepeat(false);\n        setRepeatLength(null);\n        return;\n    };\n\n    const timerExists = (name) => {\n        if (timers.some((timer) => timer.name === name)) {\n            return true;\n        }\n        return false;\n    };\n\n    const validation = () => {\n        if (\n            timerName === \"\" ||\n            timerExists(timerName) ||\n            timerLength === \"\" ||\n            Number(timerLength) === NaN ||\n            Number(timerLength) > 112 ||\n            (repeatLength !== \"\" && Number(repeatLength) === NaN)\n        ) {\n            return true;\n        }\n        if (timers.some((timer) => timer.name === timerName)) {\n            return true;\n        }\n        return false;\n    };\n\n    return (\n        <>\n            <Grid\n                container\n                spacing={1}\n                justifyContent=\"center\"\n                alignItems=\"center\"\n            >\n                <Grid item>\n                    <Input\n                        placeholder=\"Timer Name\"\n                        value={timerName}\n                        onChange={handleNameChange}\n                    />\n                </Grid>\n                <Grid item>\n                    <Input\n                        type=\"number\"\n                        placeholder=\"Length (days)\"\n                        onChange={handleTimeChange}\n                        value={timerLength}\n                    />\n                </Grid>\n                <Grid item>\n                    <FormControl component=\"fieldset\">\n                        <FormGroup\n                            aria-label=\"Set custom timer to repeat itself\"\n                            row\n                        >\n                            <FormControlLabel\n                                control={\n                                    <Checkbox\n                                        size=\"small\"\n                                        checked={timerRepeat}\n                                        onChange={handleCheck}\n                                        name=\"timerRepeat\"\n                                    />\n                                }\n                                label=\"Repeat\"\n                            />\n                        </FormGroup>\n                    </FormControl>\n                </Grid>\n                {timerRepeat && (\n                    <Grid item>\n                        <Input\n                            type=\"number\"\n                            placeholder=\"Length (days)\"\n                            onChange={handleRepeatLengthChange}\n                            value={repeatLength}\n                        />\n                    </Grid>\n                )}\n            </Grid>\n            <Grid\n                container\n                spacing={1}\n                justifyContent=\"center\"\n                alignItems=\"center\"\n                sx={{ py: 1 }}\n            >\n                <Grid item>\n                    <Button\n                        variant=\"contained\"\n                        style={\n                            !validation()\n                                ? { backgroundColor: \"green\", color: \"white\" }\n                                : {}\n                        }\n                        disabled={validation()}\n                        onClick={() => createCustomTimer()}\n                    >\n                        <FontAwesomeIcon icon={faCheck} /> &nbsp; Create it\n                    </Button>\n                </Grid>\n                <Grid item>\n                    <Button\n                        variant=\"contained\"\n                        color=\"warning\"\n                        disabled={timerName === \"\" || timerLength === null}\n                        onClick={() => clearTimer()}\n                    >\n                        <FontAwesomeIcon icon={faTimes} />\n                        &nbsp;Clear it\n                    </Button>\n                </Grid>\n            </Grid>\n        </>\n    );\n};\n\nexport default CustomTimer;\n","import React from \"react\";\nimport { TextField } from \"@mui/material\";\n\nconst Journal = ({ journalText, setJournalText }) => {\n    const handleChange = (e) => {\n        setJournalText(e.target.value);\n    };\n\n    return (\n        <TextField\n            fullWidth\n            id=\"user-notepad\"\n            label=\"Journal\"\n            multiline\n            rows={6}\n            value={journalText}\n            onChange={handleChange}\n        />\n    );\n};\n\nexport default Journal;\n","import React from \"react\";\nimport {\n    Grid,\n    FormControl,\n    FormGroup,\n    FormControlLabel,\n    Checkbox,\n    Typography,\n    Box,\n} from \"@mui/material\";\nimport ArtisanTimer from \"./Artisan-Timer\";\nimport HarvestTimer from \"./Harvest-Timer\";\nimport CurrentTimers from \"./Current-Timers\";\nimport CustomTimer from \"./Custom-Timer\";\nimport Journal from \"./Journal\";\n\nconst LogPage = ({\n    currentDate,\n    date,\n    currentTimers,\n    artisanTimers,\n    harvestTimers,\n    journal,\n    customTimers,\n    handleCheck,\n    mobile,\n    day,\n    error,\n    setError,\n    timers,\n    setTimers,\n    hasHoney,\n    setHasHoney,\n    hasFruitTrees,\n    setHasFruitTrees,\n    journalText,\n    setJournalText,\n    skipTreeWarning,\n    setSkipTreeWarning,\n}) => {\n    return (\n        <>\n            <Grid item>\n                <Box\n                    component=\"div\"\n                    sx={{ display: \"flex\", justifyContent: \"center\" }}\n                >\n                    <FormControl component=\"fieldset\">\n                        <FormGroup\n                            aria-label=\"Choose which timers to display\"\n                            row\n                        >\n                            <Grid item>\n                                <FormControlLabel\n                                    control={\n                                        <Checkbox\n                                            size=\"small\"\n                                            checked={date}\n                                            onChange={handleCheck}\n                                            name=\"date\"\n                                        />\n                                    }\n                                    label=\"Show date\"\n                                />\n                            </Grid>\n                            <Grid item>\n                                <FormControlLabel\n                                    control={\n                                        <Checkbox\n                                            size=\"small\"\n                                            checked={currentTimers}\n                                            onChange={handleCheck}\n                                            name=\"currentTimers\"\n                                        />\n                                    }\n                                    label=\"Show current timers\"\n                                />\n                            </Grid>\n                            <Grid item>\n                                <FormControlLabel\n                                    control={\n                                        <Checkbox\n                                            size=\"small\"\n                                            checked={harvestTimers}\n                                            onChange={handleCheck}\n                                            name=\"harvestTimers\"\n                                        />\n                                    }\n                                    label=\"Show harvest timer builder\"\n                                />\n                            </Grid>\n                            <Grid item>\n                                <FormControlLabel\n                                    control={\n                                        <Checkbox\n                                            size=\"small\"\n                                            checked={artisanTimers}\n                                            onChange={handleCheck}\n                                            name=\"artisanTimers\"\n                                        />\n                                    }\n                                    label=\"Show artisan timer builder\"\n                                />\n                            </Grid>\n                            <Grid item>\n                                <FormControlLabel\n                                    control={\n                                        <Checkbox\n                                            size=\"small\"\n                                            checked={journal}\n                                            onChange={handleCheck}\n                                            name=\"journal\"\n                                        />\n                                    }\n                                    label=\"Show journal\"\n                                />\n                            </Grid>\n                            <Grid item>\n                                <FormControlLabel\n                                    control={\n                                        <Checkbox\n                                            size=\"small\"\n                                            checked={customTimers}\n                                            onChange={handleCheck}\n                                            name=\"customTimers\"\n                                        />\n                                    }\n                                    label=\"Show custom timer builder\"\n                                />\n                            </Grid>\n                        </FormGroup>\n                    </FormControl>\n                </Box>\n            </Grid>\n            <Grid item>\n                <Grid container spacing={3} justifyContent=\"space-around\">\n                    <Grid item style={{ paddingTop: 0 }}>\n                        {date && (\n                            <Grid\n                                item\n                                justifyContent=\"center\"\n                                xs={12}\n                                style={{ textAlign: \"center\" }}\n                            >\n                                {mobile ? (\n                                    <Typography variant=\"h2\">\n                                        {currentDate}\n                                    </Typography>\n                                ) : (\n                                    <Typography variant=\"h1\" component=\"h2\">\n                                        {currentDate}\n                                    </Typography>\n                                )}\n                            </Grid>\n                        )}\n                        {currentTimers && (\n                            <Grid\n                                item\n                                justifyContent=\"center\"\n                                xs={12}\n                                style={{ textAlign: \"center\" }}\n                            >\n                                <Typography variant=\"h4\" sx={{ pt: 2 }}>\n                                    Current timers:\n                                </Typography>\n                                <CurrentTimers\n                                    day={day}\n                                    error={error}\n                                    timers={timers}\n                                    setTimers={setTimers}\n                                    hasHoney={hasHoney}\n                                    hasFruitTrees={hasFruitTrees}\n                                />\n                            </Grid>\n                        )}\n                    </Grid>\n                    <Grid item>\n                        <Grid\n                            container\n                            direction=\"column\"\n                            spacing={4}\n                            justifyContent=\"space-around\"\n                            alignItems=\"center\"\n                        >\n                            {artisanTimers && (\n                                <Grid\n                                    item\n                                    md={6}\n                                    style={{\n                                        marginLeft: 15,\n                                        marginRight: 15,\n                                        paddingLeft: 10,\n                                        paddingRight: 10,\n                                    }}\n                                    justifyContent=\"center\"\n                                >\n                                    <ArtisanTimer\n                                        day={day}\n                                        timers={timers}\n                                        setTimers={setTimers}\n                                        error={error}\n                                        setError={setError}\n                                        hasHoney={hasHoney}\n                                        setHasHoney={setHasHoney}\n                                        hasFruitTrees={hasFruitTrees}\n                                        setHasFruitTrees={setHasFruitTrees}\n                                        skipTreeWarning={skipTreeWarning}\n                                        setSkipTreeWarning={setSkipTreeWarning}\n                                    />\n                                </Grid>\n                            )}\n                            {harvestTimers && (\n                                <Grid\n                                    item\n                                    md={6}\n                                    sx={{ my: 2 }}\n                                    style={{\n                                        marginLeft: 15,\n                                        marginRight: 15,\n                                        paddingLeft: 10,\n                                        paddingRight: 10,\n                                    }}\n                                >\n                                    <HarvestTimer\n                                        day={day}\n                                        timers={timers}\n                                        setTimers={setTimers}\n                                    />\n                                </Grid>\n                            )}\n                            {customTimers && (\n                                <Grid\n                                    item\n                                    md={6}\n                                    sx={{ my: 2 }}\n                                    style={{\n                                        marginLeft: 15,\n                                        marginRight: 15,\n                                        paddingLeft: 10,\n                                        paddingRight: 10,\n                                    }}\n                                >\n                                    <CustomTimer\n                                        timers={timers}\n                                        setTimers={setTimers}\n                                    />\n                                </Grid>\n                            )}\n                        </Grid>\n                    </Grid>\n                    {!date &&\n                        !currentTimers &&\n                        !harvestTimers &&\n                        !artisanTimers &&\n                        !journal &&\n                        !customTimers && (\n                            <Grid item xs={12}>\n                                <Typography\n                                    variant=\"subtitle2\"\n                                    sx={{\n                                        textAlign: \"center\",\n                                        pt: 10,\n                                        pb: 10,\n                                    }}\n                                >\n                                    <em>\n                                        There wasn't anybody else there, or\n                                        anything. There was just violet light --\n                                        and a hum.\n                                    </em>\n                                </Typography>\n                            </Grid>\n                        )}\n                    {journal && (\n                        <Grid container justifyContent=\"center\">\n                            <Grid item xs={10} sx={{ mx: \"auto\", pt: 5 }}>\n                                <Journal\n                                    journalText={journalText}\n                                    setJournalText={setJournalText}\n                                />\n                            </Grid>\n                        </Grid>\n                    )}\n                </Grid>\n            </Grid>\n        </>\n    );\n};\n\nexport default LogPage;\n","import React from \"react\";\nimport { Grid, Typography, List, ListItem, ListItemText } from \"@mui/material\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faGithub } from \"@fortawesome/free-brands-svg-icons\";\n\nconst AboutPage = () => {\n    return (\n        <Grid\n            container\n            spacing={2}\n            direction=\"column\"\n            justifyContent=\"space-around\"\n            sx={{ px: 5 }}\n        >\n            <Grid item>\n                <Typography variant=\"body1\">\n                    Stardew Log, version 0.4, February 2022. Created by Nic\n                    Addelia &nbsp;\n                    <FontAwesomeIcon icon={faGithub} />\n                    &nbsp;<a href=\"https://github.com/addelian\">@addelian</a>\n                </Typography>\n            </Grid>\n            <Grid item>\n                <Typography variant=\"body1\">\n                    This app leverages <a href=\"https://reactjs.org/\">React</a>{\" \"}\n                    and <a href=\"https://mui.com/\">MUI</a>. It was built to\n                    serve as a responsive and relatively un-intrusive companion\n                    app for the casual farming / fishing / Haley-impressing\n                    simulator Stardew Valley.\n                </Typography>\n            </Grid>\n            <Grid item>\n                <Typography variant=\"body1\">\n                    It started as a single timer that could handle two inputs:{\" \"}\n                    <strong>crop</strong> and <strong>product type</strong>. The\n                    impetus was very much a \"first-world problem:\" I disliked\n                    losing the first ~hour of each day on my farm (or having to\n                    restart each morning) due to running to each shed and seeing\n                    if my kegs or preserves jars were ready to be collected and\n                    refilled, then running back and forth collecting the\n                    products and refilling with more crops. I started leaving\n                    little reminders for myself in real life, first as a sticky\n                    note, then as part of a Google Sheet on my second screen,\n                    but I'd frequently forget about the reminder (or would\n                    forget to set them up in the first place). I decided to\n                    begin developing an app to handle this, and figured I should\n                    handle a few more timers and functions to check on other\n                    farm life scheduling concerns, like when crops are ready to\n                    be harvested or re-planted, or how often fruit tree orchards\n                    need picking. The original single timer that I built now\n                    exists as the <em>artisan timer builder</em> you can find on\n                    the \"Log\" page.\n                </Typography>\n            </Grid>\n            <Grid item>\n                <Typography variant=\"body1\">\n                    My personal requirements for the app were simple: I didn't\n                    really want to think about it while I was playing the game,\n                    so it needed to be a quick and intuitive process to build a\n                    timer and update the in-game day to keep track of them. I\n                    also didn't want the timers to affect the vanilla game\n                    experience - while I enjoy modded games as much as the next\n                    person, I still wanted to be able to appreciate the pace and\n                    minimal UI within the game itself, while knowing that I had\n                    this interface available to me should I decide to build out\n                    some timers.\n                </Typography>\n            </Grid>\n            <Grid\n                item\n                style={{ paddingLeft: 0, paddingRight: 0 }}\n                sx={{ px: 0, mx: 0 }}\n            >\n                <Typography variant=\"h3\">F.A.Q.</Typography>\n                <List>\n                    <ListItem>\n                        <ListItemText>\n                            <Typography variant=\"h6\" sx={{ mb: 1 }}>\n                                I just discovered your app and I want to use it,\n                                but I'm currently halfway through a season\n                                in-game and I am overwhelmed at the prospect of\n                                figuring out how to skip the Log ahead to match\n                                where my harvest / artisan products are at right\n                                now. Any suggestions?\n                            </Typography>\n                            <Typography variant=\"body2\">\n                                I encountered this problem when I first built\n                                the app out, and honestly, I don't have a great\n                                solution. My personal recommendation is to do\n                                one of two things: either start adding timers in\n                                as you re-plant / harvest items mid-season,\n                                which is annoying as you start it up, but will\n                                get your timers going as quickly as possible\n                                without having to do a bunch of day-counting, or\n                                just wait until the{\" \"}\n                                <strong>first day of the next season</strong>{\" \"}\n                                (but not Winter) and follow the below steps:\n                            </Typography>\n                        </ListItemText>\n                    </ListItem>\n                    <ListItem>\n                        <ListItemText>\n                            <Typography variant=\"body2\">\n                                <ol style={{ marginTop: 8 }}>\n                                    <li>\n                                        If you have fully matured fruit trees,{\" \"}\n                                        <strong>add fruit tree timer</strong>{\" \"}\n                                        (and kill the dialog if you haven't\n                                        already).\n                                    </li>\n                                    <li>\n                                        If you have bee houses,{\" \"}\n                                        <em>and it is Summer 1 or Fall 1</em>,\n                                        smack them with a pickaxe and place them\n                                        back down, then{\" \"}\n                                        <strong>add bee house timer</strong>. I\n                                        acknowledge that this is less efficient\n                                        than just adding the timer whenever your\n                                        honey does proc, and you could\n                                        potentially lose up to three days of\n                                        honey harvest time, but this by far the\n                                        the simplest way to ensure timer\n                                        accuracy at the top of a season during\n                                        the first year that you begin to use\n                                        this log (and, to reiterate, certainly\n                                        not the most efficient). Please note\n                                        that if it is Spring 1, you can just\n                                        start up the timer here, since the bees\n                                        will have just begun to produce again.\n                                    </li>\n                                    <li>\n                                        Grab whatever seeds you need, get them\n                                        planted, and{\" \"}\n                                        <strong>\n                                            add harvest timers in for every crop\n                                        </strong>\n                                        . These timers are accurate to the day\n                                        assuming two things: First, that you\n                                        never miss a day of watering, and\n                                        second, that you{\" \"}\n                                        <em>do not use any fertilizer</em>.\n                                        Unfortunately, fertilizers are just\n                                        random enough that I didn't feel\n                                        comfortable trying to account for the\n                                        growth time with them mixed into the\n                                        equation. If you're really hankering for\n                                        some timers that account for fertilizer,\n                                        feel free to make a bunch of custom\n                                        timers and shave the growth time of a\n                                        given crop down by 10/25/33%, but be\n                                        prepared for them to miss the mark every\n                                        so often.\n                                    </li>\n                                    <li>\n                                        Whenever your next batch of keg products\n                                        and/or preserves jar products are ready\n                                        to be collected, fill them up with a new\n                                        batch of crops, and{\" \"}\n                                        <strong>add artisan timers</strong> for\n                                        each product. You may notice that,\n                                        depending on the crop chosen in the\n                                        artisan timer, either the \"JAR IT\" or\n                                        \"KEG IT\" button will turn green, while\n                                        the other will turn red. This strictly\n                                        serves as a way to remind the user which\n                                        choice is better for a given crop (i.e.\n                                        more valuable). You can choose either\n                                        option every time you create an artisan\n                                        timer, but just note that the green\n                                        option will always be more valuable for\n                                        the given crop.\n                                    </li>\n                                    <li>\n                                        Once your non-regrowing crops reach\n                                        harvest time, you'll want to clear their\n                                        current timer - the one that says\n                                        \"(crop) is ready today\" - by clicking\n                                        the red \"x\" next to the timer, and add\n                                        in another timer of the same type\n                                        (assuming you want to re-plant said\n                                        crop). Friendly heads up that, if you do\n                                        not manually clear a completed timer, it\n                                        will remove itself the next day.\n                                    </li>\n                                    <li>\n                                        When the next season rolls around,{\" \"}\n                                        <strong>repeat steps 1-5.</strong>\n                                    </li>\n                                    <li>\n                                        <strong>\n                                            A few things to note about the\n                                            general flow of the app:\n                                        </strong>{\" \"}\n                                        the harvest timer <em>does</em> account\n                                        for plants that regrow, i.e. if you\n                                        plant strawberries on Spring 1, it will\n                                        alert that the first crop is ready on\n                                        Spring 9, then the timer will\n                                        automatically set itself to 4 days, and\n                                        will once again show the strawberries\n                                        are ready on Spring 13, and so on\n                                        through the end of the season. Speaking\n                                        of which, this timer also accounts for\n                                        plants that will either die upon season\n                                        change, or maintain over season changes,\n                                        e.g. when Summer 1 arrives, said\n                                        strawberry timer will be removed\n                                        automatically, but your coffee bean\n                                        timer will persist all the way through\n                                        Summer 28.\n                                    </li>\n                                </ol>\n                            </Typography>\n                        </ListItemText>\n                    </ListItem>\n                    <ListItem>\n                        <ListItemText>\n                            <Typography variant=\"h6\" sx={{ mb: 1 }}>\n                                Why didn't you include (super common simple\n                                feature) that (more popular / more complete SV\n                                app) has?\n                            </Typography>\n                            <Typography variant=\"body2\">\n                                The Stardew Log was developed solely to fill a\n                                very specific purpose in my playstyle (see\n                                above). Any other features were built out after\n                                the fact, in accordance with what I thought\n                                would most benefit other users. I play the game\n                                pretty traditionally, without any mods and with\n                                a very \"typical\" farm setup (i.e., a big area to\n                                grow crops, two barns for different animals, and\n                                some kegs, preserves jars, and casks).\n                            </Typography>\n                        </ListItemText>\n                    </ListItem>\n                    <ListItem>\n                        <ListItemText>\n                            <Typography variant=\"h6\" sx={{ mb: 1 }}>\n                                Okay, fine, but even given your approach, why\n                                didn't you include anything about villagers /\n                                fishing / mining / (other glaring omission from\n                                normal gameplay)?\n                            </Typography>\n                            <Typography variant=\"body2\">\n                                You caught me there. Truth be told, I started\n                                working on this app after already putting 150\n                                hours into my farm. My farm \"progress\" (insofar\n                                as story is concerned) is totally completed.\n                                I've fully explored the mines, all of my\n                                villager's hearts are maxed out, and I have a\n                                spouse and two children. This app could\n                                certainly still be helpful to a newer player,\n                                but that was not its intent when I built it. If\n                                I get a ton of traffic and requests for a\n                                villager page or some sort of widget that can\n                                remind users of favorite gifts, I'm not opposed\n                                to putting it in, but I have no plans to do so\n                                for the time being.\n                            </Typography>\n                        </ListItemText>\n                    </ListItem>\n                    <ListItem>\n                        <ListItemText>\n                            <Typography variant=\"h6\" sx={{ mb: 1 }}>\n                                I have played Stardew Valley for x hours. Would\n                                you recommend I use this app?\n                            </Typography>\n                            <Typography variant=\"body2\">\n                                I recommend against using apps like this from\n                                the get-go because I personally think min-maxing\n                                when still learning the ropes of a game can suck\n                                the fun out of it if you stress about it too\n                                hard from the start. On the flip side, some\n                                people love that approach regardless of\n                                playtime, so don't let me tell you how to live\n                                your life, I'm not your dad.\n                            </Typography>\n                        </ListItemText>\n                    </ListItem>\n                    <ListItem>\n                        <ListItemText>\n                            <Typography variant=\"h6\" sx={{ mb: 1 }}>\n                                Why do bee houses and fruit trees have their own\n                                buttons?\n                            </Typography>\n                            <Typography variant=\"body2\">\n                                Honey and fruit trees in this game are a little\n                                funny. First, bee houses <em>kind of</em> act\n                                like some in-game plants, in that they take four\n                                days to mature and continue to produce after the\n                                fact, but they are not crops and do not require\n                                seeds, so it felt weird plugging them into the\n                                harvest timer as if they were crops. Second,\n                                mature fruit trees start growing fruit\n                                immediately, and I wanted their timer to reflect\n                                this for my own purposes. Technically, you can\n                                pick fruit trees every day, but it's far more\n                                efficient to visit them every three days when\n                                they are full (i.e. are holding three fruit\n                                apiece). Finally, and most importantly, both bee\n                                houses and fruit trees (assuming you have mature\n                                trees for each season) continue growing between\n                                seasons, so their logic didn't quite fit with\n                                the automatic wipe I have set up in between each\n                                season. I could have shoe-horned these timers\n                                into the dropdowns, but it just didn't feel\n                                right. Unlike most other items in the game, the\n                                relationship between the farm and these items is\n                                binary. You either have mature fruit trees or\n                                you don't, and the timer acts accordingly. You\n                                either have bee houses on your farm or you\n                                don't, and the timer acts accordingly.\n                            </Typography>\n                        </ListItemText>\n                    </ListItem>\n                    <ListItem>\n                        <ListItemText>\n                            <Typography variant=\"h6\" sx={{ mb: 1 }}>\n                                Speaking of fruit trees, why don't you account\n                                for initial fruit tree growth?\n                            </Typography>\n                            <Typography variant=\"body2\">\n                                Version 0.2 of this app had a much different\n                                fruit tree timer. There was an intercept dialog\n                                that asked if you were planting a tree, or just\n                                resetting the timer at the top of a season, and\n                                if you chose the former, it would start a 28-day\n                                timer. The problem with this is that I would\n                                have had to add further logic to see if the user\n                                was accounting for a season change, and if they\n                                were growing a fruit tree that would produce\n                                fruit in the upcoming season (since fruit trees\n                                take an entire season to grow). That's a whole\n                                lot of conditional logic for a very specific\n                                moment in the lifetime of a user's farm,\n                                especially since most folks will only go through\n                                the process of building up a fruit orchard once.\n                                I felt that a happy medium would be to explain\n                                the fruit tree logic in the pop-up modal when\n                                the timer is clicked, as well as remind users\n                                that, should they wish to track a new fruit tree\n                                for some reason, they could implement their own\n                                custom timer. This was also the inspiration\n                                behind the custom timer in the first place, for\n                                what it's worth.\n                            </Typography>\n                        </ListItemText>\n                    </ListItem>\n                    <ListItem>\n                        <ListItemText>\n                            <Typography variant=\"h6\" sx={{ mb: 1 }}>\n                                Coffee takes two hours to be brewed in a keg,\n                                but the artisan timer indicates that it takes a\n                                full day (and/or insert any other timer\n                                inaccuracy here). What gives?\n                            </Typography>\n                            <Typography variant=\"body2\">\n                                Part of my personal requirements for this app is\n                                that I wanted it to be simple and unintrusive\n                                for my own personal use. For certain crops or\n                                products to be accurate, there would have to be\n                                a live timer built into the app that tracked the\n                                real-life flow of in-game time, i.e. I'd have to\n                                build an 86-second timer for coffee. This\n                                addition is simple by itself, but if the user\n                                does anything that interrupts the flow of time\n                                in-game, they would have to pause their Stardew\n                                Log timer as well. That's against the spirit of\n                                the app, in my opinion, not to mention that the\n                                whole point of the app is to not have to pay\n                                attention to timing that explicitly, whereas\n                                keeping live track of each timer in- and\n                                out-of-game requires even more attention than\n                                just playing the game by itself. At any rate,\n                                any time there was a timer that took less than a\n                                full day to complete, I rounded it up to a day.\n                                That way, I can be sure that when I do get\n                                around to checking on my kegs, etc., I can do so\n                                with the assurance that the artisan product\n                                within will be completed, and I will not have\n                                wasted any time trekking back and forth (which\n                                was the purpose of this app's creation). If a\n                                user really wants this timing to be reflected\n                                more accurately, I recommend creating a custom\n                                timer set for 0 days. As soon as it's created,\n                                the timer will say the product is ready, but\n                                then it'll simply stay in the queue for the\n                                remainder of the day and hopefully remind the\n                                user to pick up the product before the day is\n                                done.\n                            </Typography>\n                        </ListItemText>\n                    </ListItem>\n                    <ListItem>\n                        <ListItemText>\n                            <Typography variant=\"h6\" sx={{ mb: 1 }}>\n                                Why can't I create multiple timers for the same\n                                crop or artisan product?\n                            </Typography>\n                            <Typography variant=\"body2\">\n                                Part personal choice, part programming concerns.\n                                I kept accidentally selecting the same crop\n                                twice when I was building out my timers, which,\n                                at best, meant deleting the superfluous timers,\n                                or at worst, not being sure which timer was\n                                correct if I did it on two separate days,\n                                leading to extra trips in and out of the farm,\n                                which defeats the purpose of this log in the\n                                first place. That annoyance aside, from a\n                                programming perspective, dealing with dynamic\n                                lists that have self-generating IDs and keys\n                                becomes a lot more obnoxious when users can\n                                reselect the same option without any sort of\n                                restrictions. It's not impossible by any means,\n                                but it's a problem that I felt didn't need\n                                solving given its lack of utility in the game\n                                anyway. If you really want multiple timers for\n                                the same crop/product, I'd recommend building\n                                custom timers that can track different names,\n                                e.g. \"Blueberries planted on Summer 1,\"\n                                \"Blueberries planted on Summer 2,\" and so on. As\n                                an aside, if someone wants to refactor my\n                                renderList functions to allow multiple entries\n                                from the same input in a way that doesn't\n                                involve just adding a thousand conditionals onto\n                                the ID and key, be my guest! I'd love to shadow\n                                you and learn something along the way.\n                            </Typography>\n                        </ListItemText>\n                    </ListItem>\n                    <ListItem>\n                        <ListItemText>\n                            <Typography variant=\"h6\" sx={{ mb: 1 }}>\n                                I want to create a custom timer longer than 112\n                                days. Why are you stifling my creativity? You\n                                literally just said you weren't my dad, like,\n                                five questions ago.\n                            </Typography>\n                            <Typography variant=\"body2\">\n                                You're right, and I'm terribly sorry. I figure\n                                that there are very few reasons to want to build\n                                a timer that would last longer than a full\n                                Stardew year, and I wanted to put a cutoff\n                                somewhere. If folks want the timer max length to\n                                be extended, please let me know and I'll change\n                                it.\n                            </Typography>\n                        </ListItemText>\n                    </ListItem>\n                    <ListItem>\n                        <ListItemText>\n                            <Typography variant=\"h6\" sx={{ mb: 1 }}>\n                                What are the random messages along the bottom /\n                                bottom right of my screen?\n                            </Typography>\n                            <Typography variant=\"body2\">\n                                They're a random collection of quotes from some\n                                of my favorite games, literature, and films.\n                                Most geeky 30-somethings (i.e. folks in my\n                                demographic) will recognize at least a few of\n                                them. As for its functionality, I built out a\n                                list of quotes and pull a single quote from it\n                                at random every time the page refreshes. There\n                                is no rhyme or reason as to which quote is\n                                pulled at any given time. It is 100% random.\n                                Some of the messages are cryptic in isolation,\n                                and I apologize if any come across as\n                                off-putting to you. It's probably Hidetaka\n                                Miyazaki's fault, if that makes you feel any\n                                better.\n                            </Typography>\n                        </ListItemText>\n                    </ListItem>\n                </List>\n            </Grid>\n            <Grid item>\n                <Typography variant=\"body1\">\n                    Stardew Log is, and will remain, a{\" \"}\n                    <strong>work in progress</strong>. I welcome and encourage\n                    any feedback you may have for me. Please reach out to me on\n                    GitHub at the above link should you have any suggestions or\n                    recommendations, or if you would just like to connect.{\" \"}\n                    <br />\n                    Thanks for your time!\n                </Typography>\n            </Grid>\n        </Grid>\n    );\n};\n\nexport default AboutPage;\n","import React, { useState } from \"react\";\nimport {\n    Button,\n    Dialog,\n    DialogTitle,\n    DialogActions,\n    DialogContent,\n    DialogContentText,\n    Grid,\n    Typography,\n    List,\n    ListItem,\n    ListItemText,\n} from \"@mui/material\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faFire } from \"@fortawesome/free-solid-svg-icons\";\n\nconst SettingsPage = ({\n    mobile,\n    setDay,\n    setTimers,\n    setHasHoney,\n    setHasFruitTrees,\n    setShowState,\n    setJournalText,\n    setSkipTreeWarning,\n    setShowSettingsPage,\n    setShowLogPage,\n}) => {\n    const [resetOpen, setResetOpen] = useState(false);\n\n    const handleResetOpen = () => {\n        setResetOpen(true);\n    };\n\n    const handleResetClose = () => {\n        setResetOpen(false);\n    };\n\n    const resetAll = () => {\n        setDay(0);\n        setTimers([]);\n        setHasHoney(false);\n        setHasFruitTrees(false);\n        setShowState({\n            date: true,\n            artisanTimers: true,\n            currentTimers: true,\n            harvestTimers: true,\n            journal: true,\n            customTimers: false,\n        });\n        setJournalText(\n            \"Hi there! Use me to take any notes you'd like. My value will persist between page loads as long as you don't clear your cache.\"\n        );\n        setSkipTreeWarning(false);\n        setResetOpen(false);\n        setShowSettingsPage(false);\n        setShowLogPage(true);\n    };\n\n    return (\n        <Grid\n            container\n            spacing={2}\n            direction=\"column\"\n            justifyContent=\"space-between\"\n            sx={{ px: 5, py: 5 }}\n        >\n            <Grid item>\n                <Typography\n                    variant=\"body1\"\n                    sx={{ textDecorationLine: \"underline\" }}\n                >\n                    Dev tools\n                </Typography>\n                <List\n                    sx={{\n                        fontStyle: \"italic\",\n                        paddingTop: 0,\n                        paddingLeft: 0,\n                    }}\n                >\n                    <ListItem>\n                        <ListItemText>\n                            <Typography variant=\"body2\">\n                                Reset the app. Use with caution!&nbsp;\n                                {!mobile ? (\n                                    <Button\n                                        size=\"small\"\n                                        variant=\"contained\"\n                                        color=\"error\"\n                                        onClick={() => handleResetOpen()}\n                                    >\n                                        <FontAwesomeIcon icon={faFire} /> &nbsp;\n                                        Reset all\n                                    </Button>\n                                ) : (\n                                    <IconButton\n                                        variant=\"contained\"\n                                        sx={{ pr: 2 }}\n                                        color=\"error\"\n                                        onClick={() => handleResetOpen()}\n                                    >\n                                        <FontAwesomeIcon icon={faFire} />\n                                    </IconButton>\n                                )}\n                            </Typography>\n                        </ListItemText>\n                    </ListItem>\n                </List>\n            </Grid>\n            <Grid item>\n                <Typography\n                    variant=\"body1\"\n                    sx={{ textDecorationLine: \"underline\" }}\n                >\n                    Planned features\n                </Typography>\n                <List\n                    sx={{\n                        fontStyle: \"italic\",\n                        paddingTop: 0,\n                        paddingLeft: 0,\n                    }}\n                >\n                    <ListItem>\n                        <ListItemText>\n                            <Typography variant=\"body2\">\n                                Light/dark mode\n                            </Typography>\n                        </ListItemText>\n                    </ListItem>\n                    <ListItem>\n                        <ListItemText>\n                            <Typography variant=\"body2\">\n                                Ability to save and load different accounts\n                                and/or farms\n                            </Typography>\n                        </ListItemText>\n                    </ListItem>\n                    <ListItem>\n                        <ListItemText>\n                            <Typography variant=\"body2\">\n                                Jump to any day of your choosing without having\n                                to click through\n                            </Typography>\n                        </ListItemText>\n                    </ListItem>\n                    <ListItem>\n                        <ListItemText>\n                            <Typography variant=\"body2\">\n                                Budget calculator / planner tool\n                            </Typography>\n                        </ListItemText>\n                    </ListItem>\n                </List>\n            </Grid>\n\n            <Dialog\n                open={resetOpen}\n                onClose={handleResetClose}\n                aria-labelledby=\"reset-dialog\"\n            >\n                <DialogTitle id=\"reset-dialog\">\n                    Are you sure you wish to reset?\n                </DialogTitle>\n                <DialogContent>\n                    <DialogContentText>\n                        You will lose all of your timers, as well as the\n                        contents of your journal, and be sent back to Spring 1\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button\n                        autoFocus\n                        onClick={() => handleResetClose()}\n                        color=\"primary\"\n                    >\n                        No\n                    </Button>\n                    <Button onClick={() => resetAll()} color=\"primary\">\n                        Yes\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </Grid>\n    );\n};\n\nexport default SettingsPage;\n","import React, { useState } from \"react\";\nimport {\n    IconButton,\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogContentText,\n    DialogTitle,\n} from \"@mui/material\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faArrowLeft, faArrowRight } from \"@fortawesome/free-solid-svg-icons\";\nimport { CROPS } from \"../data/crops\";\n\nconst Counter = ({\n    day,\n    setDay,\n    mobile,\n    timers,\n    setTimers,\n    setError,\n    setHasHoney,\n    hasFruitTrees,\n    setHasFruitTrees,\n}) => {\n    const [spring1Reminder, setSpring1Reminder] = useState(false);\n\n    const handleSpring1Reminder = () => {\n        setSpring1Reminder(true);\n    };\n\n    const handleSpring1Close = () => {\n        setSpring1Reminder(false);\n    };\n\n    const handleError = () => {\n        const removeError = () => {\n            setError({ exists: false });\n        };\n        setTimeout(removeError, 5000);\n    };\n\n    const handleSeasonChange = (remainingTimers, season) => {\n        const toRemove = remainingTimers.filter(\n            (timer) =>\n                timer.timerType === \"harvest\" && !timer.season.includes(season)\n        );\n        const clearedTimers = remainingTimers.filter(\n            (timer) => !toRemove.includes(timer)\n        );\n        if (hasFruitTrees && season !== \"winter\") {\n            const i = clearedTimers.findIndex(\n                (timer) => timer.name === \"Fruit Trees\"\n            );\n            const product = CROPS.find((crop) => crop.name === \"Fruit Trees\");\n            const newSeasonFruitTrees = {\n                ...product,\n                countdown: 2,\n                firstHarvest: true,\n                timerType: \"harvest\",\n                timerFor: \"Fruit Trees\",\n            };\n            clearedTimers.splice(i, 1, newSeasonFruitTrees);\n        }\n        setTimers(clearedTimers);\n        if (season === \"winter\") {\n            setHasFruitTrees(false);\n            setHasHoney(false);\n        }\n        if (toRemove.length > 0) {\n            setError({\n                exists: true,\n                message: `Welcome to ${season}!`,\n                description: `The following items cannot be harvested during ${season}, and thus, their timers were removed:`,\n                triggers: toRemove,\n            });\n            handleError();\n            return;\n        }\n        return;\n    };\n\n    const advanceDay = (activeTimers) => {\n        day < 111 ? setDay(day + 1) : setDay(0);\n        const timersCountingDown = activeTimers.map((timer) => {\n            return { ...timer, countdown: timer.countdown - 1 };\n        });\n        setTimers(timersCountingDown);\n        const timersToRemove = timersCountingDown.filter(\n            (timer) =>\n                timer.countdown < 0 &&\n                !(\n                    (timer.timerType === \"harvest\" && timer.regrow) ||\n                    (timer.timerType === \"custom\" && timer.repeat)\n                )\n        );\n        const timersToKeep = timersCountingDown.filter(\n            (timer) =>\n                timer.countdown >= 0 ||\n                (timer.timerType === \"harvest\" && timer.regrow) ||\n                (timer.timerType === \"custom\" && timer.repeat)\n        );\n        if (timersToRemove.length > 0) {\n            setTimers(timersToKeep);\n            console.log(\"Completed timer(s) removed: \", timersToRemove);\n        }\n        timersToKeep.forEach((timer) => {\n            if (\n                timer.countdown === 0 &&\n                (timer.timerType === \"harvest\" ||\n                    timer.timerType === \"custom\") &&\n                (timer.regrow || timer.repeat)\n            ) {\n                if (timer.firstHarvest) {\n                    timer.firstHarvest = false;\n                }\n                timer.countdown =\n                    timer.timerType === \"harvest\"\n                        ? timer.regrowTime\n                        : timer.repeatLength;\n            }\n        });\n        if (day === 111) {\n            handleSeasonChange(timersToKeep, \"spring\");\n            handleSpring1Reminder();\n        }\n        if (day === 27) {\n            handleSeasonChange(timersToKeep, \"summer\");\n        }\n        if (day === 55) {\n            handleSeasonChange(timersToKeep, \"fall\");\n        }\n        if (day === 83) {\n            handleSeasonChange(timersToKeep, \"winter\");\n        }\n    };\n\n    const revertDay = (activeTimers) => {\n        day > 0 ? setDay(day - 1) : setDay(111);\n        const timersCountingUp = activeTimers.map(\n            (timer) => (timer = { ...timer, countdown: timer.countdown + 1 })\n        );\n        setTimers(timersCountingUp);\n        const timersToRemove = [];\n        const timersToKeep = [];\n        const checkRemainingTimers = (revertedTimers, timersFrom, toDo) => {\n            if (timersFrom === \"artisan\") {\n                if (toDo === \"remove\") {\n                    const artisansToRemove = revertedTimers.filter(\n                        (timer) =>\n                            [\"keg\", \"jar\"].includes(timer.timerType) &&\n                            (timer.timerType === \"keg\"\n                                ? timer.countdown > timer.kegDuration\n                                : timer.countdown > 3)\n                    );\n                    if (artisansToRemove.length > 0) {\n                        return artisansToRemove;\n                    }\n                    return;\n                }\n                if (toDo === \"keep\") {\n                    const artisansToKeep = revertedTimers.filter(\n                        (timer) =>\n                            [\"keg\", \"jar\"].includes(timer.timerType) &&\n                            (timer.timerType === \"keg\"\n                                ? timer.countdown <= timer.kegDuration\n                                : timer.countdown <= 3)\n                    );\n                    if (artisansToKeep.length > 0) {\n                        return artisansToKeep;\n                    }\n                    return;\n                }\n            }\n            if (timersFrom === \"harvest\") {\n                if (toDo === \"remove\") {\n                    const harvestsToRemove = revertedTimers.filter(\n                        (timer) =>\n                            timer.timerType === \"harvest\" &&\n                            ((timer.firstHarvest &&\n                                timer.countdown > timer.growTime) ||\n                                (!timer.firstHarvest &&\n                                    timer.countdown > timer.regrowTime))\n                    );\n                    if (harvestsToRemove.length > 0) {\n                        return harvestsToRemove;\n                    }\n                    return;\n                }\n                if (toDo === \"keep\") {\n                    const harvestsToKeep = revertedTimers.filter(\n                        (timer) =>\n                            timer.timerType === \"harvest\" &&\n                            ((timer.firstHarvest &&\n                                timer.countdown <= timer.growTime) ||\n                                (!timer.firstHarvest &&\n                                    timer.countdown <= timer.regrowTime))\n                    );\n                    if (harvestsToKeep.length > 0) {\n                        return harvestsToKeep;\n                    }\n                    return;\n                }\n            }\n            return;\n        };\n        checkRemainingTimers(timersCountingUp, \"artisan\", \"remove\") !==\n        undefined\n            ? timersToRemove.push(\n                  ...checkRemainingTimers(timersCountingUp, \"artisan\", \"remove\")\n              )\n            : null;\n        checkRemainingTimers(timersCountingUp, \"harvest\", \"remove\") !==\n        undefined\n            ? timersToRemove.push(\n                  ...checkRemainingTimers(timersCountingUp, \"harvest\", \"remove\")\n              )\n            : null;\n        checkRemainingTimers(timersCountingUp, \"artisan\", \"keep\") !== undefined\n            ? timersToKeep.push(\n                  ...checkRemainingTimers(timersCountingUp, \"artisan\", \"keep\")\n              )\n            : null;\n        checkRemainingTimers(timersCountingUp, \"harvest\", \"keep\") !== undefined\n            ? timersToKeep.push(\n                  ...checkRemainingTimers(timersCountingUp, \"harvest\", \"keep\")\n              )\n            : null;\n        if (timersToRemove.length > 0) {\n            setTimers(timersToKeep);\n            setError({\n                exists: true,\n                message: \"Invalid Timer\",\n                description: \"The timers for the following items were removed:\",\n                triggers: timersToRemove,\n            });\n            console.log(\"Invalid timer(s) removed: \", timersToRemove);\n            if (timersToRemove.some((timer) => timer.name === \"Honey\")) {\n                setHasHoney(false);\n            }\n            if (timersToRemove.some((timer) => timer.name === \"Fruit Trees\")) {\n                setHasFruitTrees(false);\n            }\n            handleError();\n        }\n    };\n\n    return (\n        <>\n            <Dialog\n                open={spring1Reminder}\n                onClose={handleSpring1Close}\n                aria-labelledby=\"spring-1-dialog\"\n            >\n                <DialogTitle id=\"spring-1-dialog\">\n                    Spring has sprung again!\n                </DialogTitle>\n                <DialogContent>\n                    <DialogContentText>\n                        If you have bee houses and mature fruit trees on your\n                        farm, you'll want to reactivate those timers today!\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button\n                        autoFocus\n                        onClick={() => handleSpring1Close()}\n                        color=\"primary\"\n                    >\n                        Got it\n                    </Button>\n                </DialogActions>\n            </Dialog>\n            {!mobile ? (\n                <Button\n                    size=\"small\"\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    onClick={() => revertDay(timers)}\n                >\n                    <FontAwesomeIcon icon={faArrowLeft} />\n                    &nbsp;&nbsp;Revert Day\n                </Button>\n            ) : (\n                <IconButton\n                    color=\"secondary\"\n                    sx={{ px: 2 }}\n                    onClick={() => revertDay(timers)}\n                >\n                    <FontAwesomeIcon icon={faArrowLeft} />\n                </IconButton>\n            )}\n            {!mobile ? (\n                <Button\n                    color=\"success\"\n                    size=\"small\"\n                    variant=\"contained\"\n                    onClick={() => advanceDay(timers)}\n                >\n                    Advance day&nbsp;&nbsp;\n                    <FontAwesomeIcon icon={faArrowRight} />\n                </Button>\n            ) : (\n                <IconButton\n                    sx={{ color: \"white\", pl: 2 }}\n                    onClick={() => advanceDay(timers)}\n                >\n                    <FontAwesomeIcon icon={faArrowRight} />\n                </IconButton>\n            )}\n        </>\n    );\n};\n\nexport default Counter;\n","export const QUOTES = [\n    \"Poo-tee-weet?\",\n    \"So it goes\",\n    \"Fear the old blood\",\n    \"If only I could be so grossly incandescent\",\n    \"Sorry to jet, but I'm in a hurry\",\n    \"You'll never defeat Andross\",\n    \"You can't beat me, I've got a better ship\",\n    \"Never give up. Trust your instincts\",\n    \"You've become so strong, Fox\",\n    \"Only I have the brains to rule Lylat\",\n    \"Location confirmed. Sending supplies\",\n    \"Don't give up, skeleton\",\n    \"Oh hi doggy\",\n    \"You're my favorite customer\",\n    \"Bear seek seek lest\",\n    \"The curse of life is the curse of want. And so you peer into the fog in hope of answers\",\n    \"Fool of a Took\",\n    \"You were at my side all along. My guiding moonlight\",\n    \"A corpse is left well enough alone\",\n    \"It's Farmer [74][166][163]!!\",\n    \"Tonight, Gehrman joins the hunt\",\n    \"Hesitation is defeat\",\n    \"A hunter must hunt\",\n    \"Don't you dare go hollow\",\n    \"You ever wonder why we're here?\",\n    \"Wrong lever\",\n    \"Oh right, the poison. The poison for Kuzco\",\n    \"22 minutes / 14.3 billion years\",\n    \"You runnin' Bay to Breakers this year?\",\n    \"Are you the next monarch? Or merely a pawn of fate?\",\n    \"I pass the test. I will diminish, and go into the West, and remain Galadriel\",\n    \"I don’t know half of you half as well as I should like; and I like less than half of you half as well as you deserve\",\n];\n","import React, { useState, useEffect } from \"react\";\nimport { Grid, Typography } from \"@mui/material\";\nimport { QUOTES } from \"../data/quotes\";\n\nconst FooterComponent = () => {\n    const [quote, setQuote] = useState(\"\");\n\n    useEffect(() => {\n        const quoteDuJour = renderQuote(QUOTES);\n        setQuote(quoteDuJour);\n    }, []);\n\n    const renderQuote = (quotes) => {\n        const getQuote = (amountOfQuotes) => {\n            return Math.floor(Math.random() * amountOfQuotes);\n        };\n        return quotes[getQuote(quotes.length)];\n    };\n\n    return (\n        <Grid container direction=\"column\" spacing={1}>\n            <Grid item>\n                <Grid container spacing={1} justifyContent=\"space-between\">\n                    <Grid item>\n                        <Typography variant=\"subtitle1\">\n                            Stardew Valley © ConcernedApe LLC.\n                        </Typography>\n                    </Grid>\n                    <Grid item>\n                        <Typography variant=\"subtitle1\">\n                            <em>{quote}</em>\n                        </Typography>\n                    </Grid>\n                </Grid>\n            </Grid>\n        </Grid>\n    );\n};\n\nexport default FooterComponent;\n","import React, { useState, useEffect } from \"react\";\nimport {\n    Button,\n    Menu,\n    MenuItem,\n    Grid,\n    AppBar,\n    Toolbar,\n    Typography,\n    IconButton,\n} from \"@mui/material\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faBars, faCheck } from \"@fortawesome/free-solid-svg-icons\";\nimport LogPage from \"./Log-Page\";\nimport AboutPage from \"./About-Page\";\nimport SettingsPage from \"./Settings-Page\";\nimport Counter from \"./Counter\";\nimport FooterComponent from \"./FooterComponent\";\nimport { readDate } from \"../helpers/common\";\n\nconst Home = () => {\n    const [mobile, setMobile] = useState(false);\n    const [day, setDay] = useState(0);\n    const [timers, setTimers] = useState([]);\n    const [error, setError] = useState({\n        exists: false,\n        message: \"Oh no!\",\n        description: \"\",\n        triggers: [],\n    });\n    const [hasHoney, setHasHoney] = useState(false);\n    const [hasFruitTrees, setHasFruitTrees] = useState(false);\n    const [showLogPage, setShowLogPage] = useState(true);\n    const [showSettingsPage, setShowSettingsPage] = useState(false);\n    const [showAboutPage, setShowAboutPage] = useState(false);\n    const [journalText, setJournalText] = useState(\n        \"Hi there! Use me to take any notes you'd like. My value will persist between page loads as long as you don't clear your cache.\"\n    );\n    const [skipTreeWarning, setSkipTreeWarning] = useState(false);\n    const [showState, setShowState] = useState({\n        date: true,\n        artisanTimers: true,\n        harvestTimers: true,\n        currentTimers: true,\n        journal: true,\n        customTimers: false,\n    });\n\n    const {\n        date,\n        artisanTimers,\n        harvestTimers,\n        currentTimers,\n        journal,\n        customTimers,\n    } = showState;\n\n    const currentDate = readDate(day);\n\n    // Loads local storage on componentDidMount\n    useEffect(() => {\n        setDay(JSON.parse(window.localStorage.getItem(\"day\")));\n        setTimers(JSON.parse(window.localStorage.getItem(\"timers\")));\n        setHasHoney(JSON.parse(window.localStorage.getItem(\"hasHoney\")));\n        setHasFruitTrees(\n            JSON.parse(window.localStorage.getItem(\"hasFruitTrees\"))\n        );\n        setShowState(JSON.parse(window.localStorage.getItem(\"showState\")));\n        setJournalText(JSON.parse(window.localStorage.getItem(\"journalText\")));\n        setSkipTreeWarning(\n            JSON.parse(window.localStorage.getItem(\"skipTreeWarning\"))\n        );\n    }, []);\n\n    // Basic save functionality\n    useEffect(() => {\n        window.localStorage.setItem(\"day\", day);\n    }, [day]);\n    useEffect(() => {\n        window.localStorage.setItem(\"timers\", JSON.stringify(timers));\n    }, [timers]);\n    useEffect(() => {\n        window.localStorage.setItem(\"hasHoney\", hasHoney);\n    }, [hasHoney]);\n    useEffect(() => {\n        window.localStorage.setItem(\"hasFruitTrees\", hasFruitTrees);\n    }, [hasFruitTrees]);\n    useEffect(() => {\n        window.localStorage.setItem(\"showState\", JSON.stringify(showState));\n    }, [showState]);\n    useEffect(() => {\n        window.localStorage.setItem(\"journalText\", JSON.stringify(journalText));\n    }, [journalText]);\n    useEffect(() => {\n        window.localStorage.setItem(\"skipTreeWarning\", skipTreeWarning);\n    }, [skipTreeWarning]);\n\n    useEffect(() => {\n        const setResponsiveness = () => {\n            if (window.innerWidth < 500) {\n                setMobile(true);\n            } else setMobile(false);\n        };\n\n        setResponsiveness();\n\n        window.addEventListener(\"resize\", () => setResponsiveness());\n\n        return () => {\n            window.removeEventListener(\"resize\", () => setResponsiveness());\n        };\n    }, []);\n\n    const [menuOpen, setMenuOpen] = useState(null);\n    const open = Boolean(menuOpen);\n    const handleClick = (event) => {\n        setMenuOpen(event.currentTarget);\n    };\n\n    const handleCheck = (e) => {\n        setShowState({\n            ...showState,\n            [e.target.name]: e.target.checked,\n        });\n    };\n\n    const handleClose = () => {\n        setMenuOpen(null);\n    };\n\n    return (\n        <Grid\n            container\n            spacing={4}\n            direction=\"column\"\n            justifyContent=\"space-between\"\n            alignItems=\"space-between\"\n        >\n            <Grid item>\n                <AppBar position=\"static\">\n                    <Toolbar>\n                        <IconButton\n                            aria-controls=\"basic-menu\"\n                            aria-haspopup=\"true\"\n                            aria-expanded={open ? \"true\" : undefined}\n                            onClick={handleClick}\n                            size=\"large\"\n                            edge=\"start\"\n                            aria-label=\"menu\"\n                            sx={\n                                mobile\n                                    ? {\n                                          flexGrow: 1,\n                                          justifyContent: \"start\",\n                                          color: \"white\",\n                                      }\n                                    : { mr: 2, color: \"white\" }\n                            }\n                        >\n                            <FontAwesomeIcon icon={faBars} />\n                        </IconButton>\n                        <Menu\n                            id=\"basic-menu\"\n                            anchorEl={menuOpen}\n                            open={open}\n                            onClose={handleClose}\n                            MenuListProps={{\n                                \"aria-labelledby\": \"basic-button\",\n                            }}\n                        >\n                            <MenuItem\n                                onClick={() => {\n                                    setShowSettingsPage(false);\n                                    setShowAboutPage(false);\n                                    setShowLogPage(true);\n                                    handleClose();\n                                }}\n                            >\n                                {showLogPage && (\n                                    <>\n                                        <FontAwesomeIcon icon={faCheck} />\n                                        &nbsp;\n                                    </>\n                                )}\n                                Log\n                            </MenuItem>\n                            <MenuItem\n                                onClick={() => {\n                                    setShowLogPage(false);\n                                    setShowAboutPage(false);\n                                    setShowSettingsPage(true);\n                                    handleClose();\n                                }}\n                            >\n                                {showSettingsPage && (\n                                    <>\n                                        <FontAwesomeIcon icon={faCheck} />\n                                        &nbsp;\n                                    </>\n                                )}\n                                Settings\n                            </MenuItem>\n                            <MenuItem\n                                onClick={() => {\n                                    setShowLogPage(false);\n                                    setShowSettingsPage(false);\n                                    setShowAboutPage(true);\n                                    handleClose();\n                                }}\n                            >\n                                {showAboutPage && (\n                                    <>\n                                        <FontAwesomeIcon icon={faCheck} />\n                                        &nbsp;\n                                    </>\n                                )}\n                                About\n                            </MenuItem>\n                        </Menu>\n                        {mobile ? (\n                            <Typography\n                                variant=\"h6\"\n                                component=\"h1\"\n                                sx={{ flexGrow: 1 }}\n                            >\n                                S.L.\n                            </Typography>\n                        ) : (\n                            <Typography\n                                variant=\"h6\"\n                                component=\"h1\"\n                                sx={{ flexGrow: 1 }}\n                            >\n                                Stardew Log\n                            </Typography>\n                        )}\n                        {showLogPage && (\n                            <Counter\n                                day={day}\n                                mobile={mobile}\n                                setDay={setDay}\n                                timers={timers}\n                                setTimers={setTimers}\n                                setError={setError}\n                                setHasHoney={setHasHoney}\n                                hasFruitTrees={hasFruitTrees}\n                                setHasFruitTrees={setHasFruitTrees}\n                            />\n                        )}\n                    </Toolbar>\n                </AppBar>\n            </Grid>\n            {showLogPage && (\n                <LogPage\n                    date={date}\n                    currentTimers={currentTimers}\n                    harvestTimers={harvestTimers}\n                    artisanTimers={artisanTimers}\n                    journal={journal}\n                    customTimers={customTimers}\n                    currentDate={currentDate}\n                    mobile={mobile}\n                    handleCheck={handleCheck}\n                    day={day}\n                    error={error}\n                    setError={setError}\n                    timers={timers}\n                    setTimers={setTimers}\n                    hasHoney={hasHoney}\n                    setHasHoney={setHasHoney}\n                    hasFruitTrees={hasFruitTrees}\n                    setHasFruitTrees={setHasFruitTrees}\n                    journalText={journalText}\n                    setJournalText={setJournalText}\n                    skipTreeWarning={skipTreeWarning}\n                    setSkipTreeWarning={setSkipTreeWarning}\n                />\n            )}\n            {showSettingsPage && (\n                <SettingsPage\n                    mobile={mobile}\n                    setDay={setDay}\n                    setTimers={setTimers}\n                    setHasHoney={setHasHoney}\n                    setHasFruitTrees={setHasFruitTrees}\n                    setShowState={setShowState}\n                    setJournalText={setJournalText}\n                    setSkipTreeWarning={setSkipTreeWarning}\n                    setShowSettingsPage={setShowSettingsPage}\n                    setShowLogPage={setShowLogPage}\n                />\n            )}\n            {showAboutPage && (\n                <Grid item>\n                    <AboutPage />\n                </Grid>\n            )}\n            <Grid item>\n                <Grid container justifyContent=\"space-around\">\n                    <Grid item xs={11}>\n                        <FooterComponent />\n                    </Grid>\n                </Grid>\n            </Grid>\n        </Grid>\n    );\n};\n\nexport default Home;\n","import { ThemeProvider, StyledEngineProvider, createTheme } from '@mui/material/styles';\nimport './App.css';\nimport Home from \"./components/Home\";\n\nconst theme = createTheme();\n\nfunction App() {\n  return (\n    <StyledEngineProvider injectFirst>\n      <ThemeProvider theme={theme}>\n        <div className=\"App\">\n            <Home />\n        </div>\n      </ThemeProvider>\n    </StyledEngineProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}